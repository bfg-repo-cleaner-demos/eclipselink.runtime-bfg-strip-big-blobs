<?xml version="1.0"?>
<!--/*******************************************************************************
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
* which accompanies this distribution.
* The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
* and the Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*     - properties ending in .jar define jarfile names only (no path)
*     - properties ending in .lib are fully qualified jars (path and filename)
*     - properties ending in .dir are directory paths
*     - properties ending in .path are path refid names or explicit classpath fragments
*   - multi-word targets use hyphens '-'
*     - targets beginning with test- are reserved for high level test targets,
*       and are used in test results parsing
*     - targets typically use the form <action>-<object>-<type> (ie. package-bundle-zip)
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatinated
*     e.g. 'runpathref'
*   - multi-word tasks (taskdef) names are concatinated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
*
* Contributors:
*     tware - initial API and implementation
*     egwin   Update and add to nightly process.
#******************************************************************************/-->

<!-- This ant project includes the following tasks:
        - all (default) : compiles all JPA tests, packages test jars
        - compile : compiles all JPA tests
        - package : jars JPA persistent units and tests jars
        - test : runs als JPA WDF tests

        It requires some configuration of the build.properties and test.properties to run.
    -->
<project name="eclipselink.jpa.wdf.test" default="build" basedir=".">
    <available file="../${ant.project.name}" type="dir" property="wdf_test.is.local"/>
    <fail message="Not running from '${ant.project.name}' directory" unless="wdf_test.is.local"/>

    <dirname  property="wdf_test.build.location_temp" file="${ant.file.eclipselink.jpa.wdf.test}"/>
    <pathconvert targetos="unix" property="wdf_test.build.location">
        <path>
            <pathelement location="${wdf_test.build.location_temp}"/>
        </path>
    </pathconvert>
    <echo message="wdf_test.build.location = '${wdf_test.build.location}'"/>
    <condition property="wdf_test.2.trunk.dir" value="../.." else="..">
        <contains string="${wdf_test.build.location}" substring="jpa/${ant.project.name}"/>
    </condition>
    <echo message="wdf_test.2.trunk.dir = '${wdf_test.2.trunk.dir}'"/>
    <property name="wdf_test.2.common.plugins.dir" value="${wdf_test.2.trunk.dir}/plugins"/>
    <property name="wdf_test.2.jpa.plugins.dir"    value="${wdf_test.2.trunk.dir}/jpa/plugins"/>
    <property name="wdf_test.2.core.dir"           value="${wdf_test.2.trunk.dir}/foundation/org.eclipse.persistence.core"/>
    <property name="wdf_test.2.jpa.dir"            value="${wdf_test.2.trunk.dir}/jpa/org.eclipse.persistence.jpa"/>
    <property name="wdf_test.2.moxy.dir"           value="${wdf_test.2.trunk.dir}/moxy/org.eclipse.persistence.moxy"/>
    <property name="wdf_test.2.core.test.dir"      value="${wdf_test.2.trunk.dir}/foundation/eclipselink.core.test"/>
    <property name="env" environment="env"         value="env"/>

    <!-- Allows a user to overide certain user specific properties. -->
    <property file="${user.home}/build.properties"/>
    <property file="${user.home}/test.properties"/>
    <property file="${wdf_test.build.location}/build.properties"/>
    <property file="${wdf_test.build.location}/local.build.properties"/>
    <property file="${wdf_test.build.location}/${test.properties}"/>
    <property file="${wdf_test.build.location}/test.properties"/>

    <!-- Default ant targets, compiles and packages test jars, does not run tests. -->
    <target name="build-against-jar"     depends="clean, init_against_jar, compile, package"                description="build JPA WDF testing jars"/>
    <target name="build-against-classes" depends="clean, init_against_classes, compile, package"            description="build JPA WDF testing jars"/>
    <target name="build-against-bundles" depends="clean, init_against_bundles, compile, package"            description="build JPA WDF testing jars"/>
    <target name="test-against-jar"      depends="clean-test, init_against_jar, init_runtime, test-lrg"     description="run JPA WDF tests"/>
    <target name="test-against-classes"  depends="clean-test, init_against_classes, init_runtime, test-lrg" description="run JPA WDF tests"/>
    <target name="test-against-bundles"  depends="clean-test, init_against_bundles, init_runtime, test-lrg" description="run JPA WDF tests"/>
    <!-- convienience targets -->
    <target name="build"     depends="build-against-jar"/>
    <target name="test"      depends="test-against-jar"/>
    
    <target name="clean" description="Clean the build">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${wdf_test.build.location}/${classes.dir}"/>
            <fileset file="${wdf_test.build.location}/${eclipselink.tests.jar}"/>
            <fileset file="${wdf_test.build.location}/${eclipselink.wdf.jpa1.model}.jar"/>
            <fileset file="${wdf_test.build.location}/${eclipselink.wdf.jpa2.model}.jar"/>
        </delete>
    </target>

    <!-- Creates required path variables and directories for building. -->
    <target name="init">
        <property name="eclipselink.lib" value="${wdf_test.2.trunk.dir}/${eclipselink.jar}"/>
        <mkdir dir="${wdf_test.build.location}/${classes.dir}"/>
        <path id="base.compile.path">
            <pathelement path="${wdf_test.2.core.test.dir}/${classes.dir}"/>
            <pathelement path="${wdf_test.2.core.test.dir}/${eclipselink.tests.jar}"/>
            <pathelement path="${wdf_test.2.jpa.plugins.dir}/${persistence20.jar}"/>
            <!-- These paths are unneeded for compile or run (from core.depend) may be needed in future -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${unsigned.persistence10.jar}"/ -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${activation.jar}"/ -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${resource.jar}"/ -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${ejb.jar}"/ -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${jms.jar}"/ -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${stax_api.jar}"/ -->
            <!-- pathelement path="${wdf_test.2.common.plugins.dir}/${mail.jar}"/ -->
            <pathelement path="${wdf_test.2.common.plugins.dir}/${transaction.jar}"/>
            <pathelement path="${junit.lib}"/>
            <!-- Needed for performance tests comparing with hibernate.>
            <fileset dir="${hibernate.dir}">
                <include name="*.jar"/>
            </fileset-->
            <!-- Needed for tests using coherence.>
            <fileset dir="${coherence.dir}">
                <include name="*.jar"/>
            </fileset-->
        </path>
        <path id="product.classes.path">
            <pathelement path="${wdf_test.2.core.dir}/${classes.dir}"/>
            <pathelement path="${wdf_test.2.jpa.dir}/${classes.dir}"/>
            <pathelement path="${wdf_test.2.moxy.dir}/${classes.dir}"/>
            <pathelement path="${eclipselink.plugins}/${antlr}"/>
            <pathelement path="${eclipselink.plugins}/${asm}"/>
        </path>
        <path id="product.bundles.path">
            <fileset dir="${wdf_test.2.common.plugins.dir}"
                includes="org.eclipse.persistence.core_*.jar,
                          org.eclipse.persistence.jpa_*.jar,
                          org.eclipse.persistence.moxy_*.jar,
                          org.eclipse.persistence.asm_*.jar,
                          org.eclipse.persistence.antlr_*.jar
                "
            />
        </path>
        <path id="product.jar.path">
            <pathelement path="${eclipselink.lib}"/>
        </path>
    </target>

    <target name="init_against_jar" depends="init">
        <path id="compile.path">
            <path refid="product.jar.path"/>
            <path refid="base.compile.path"/>
        </path>
    </target>
   
    <target name="init_against_classes" depends="init">
        <path id="compile.path">
            <path refid="product.classes.path"/>
            <path refid="base.compile.path"/>
        </path>
    </target>

    <target name="init_against_bundles" depends="init">
        <path id="compile.path">
            <path refid="product.bundles.path"/>
            <path refid="base.compile.path"/>
        </path>
    </target>

    <!-- Compiles all tests. -->
    <target name="compile" description="compile EclipseLink testing">
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               debug="${javac.debug}"
               debuglevel="${javac.debuglevel}"
               optimize="${javac.optimize}"
               source="${javac.version}"
               target="${javac.version}"
               deprecation="${javac.deprecation}"
               failonerror="true">
            <include name="org/eclipse/persistence/testing/**"/>
            <classpath>
                <path refid="compile.path"/>
            </classpath>
        </javac>
    </target>

    <!-- Packages JPA persistent unit test jars. -->
    <target name="package" depends="package-wdf-jpa2-model, package-wdf-jpa1-model" description="build EclipseLink jar">
        <jar jarfile="${wdf_test.build.location}/${eclipselink.tests.jar}">
           <fileset dir="${wdf_test.build.location}/${classes.dir}"
                    includes="org/eclipse/persistence/testing/framework/**/*.class,
                        org/eclipse/persistence/testing/tests/**/*.class"/>
        </jar>
    </target>

    <target name="package-wdf-jpa2-model">
        <jar jarfile="${wdf_test.build.location}/${eclipselink.wdf.jpa2.model}.jar">
            <zipfileset dir="${wdf_test.build.location}/resource/${eclipselink.wdf.jpa2.model}" includes="*.xml" prefix="META-INF"/>
            <fileset dir="${wdf_test.build.location}/${classes.dir}"
                     includes="org/eclipse/persistence/testing/models/wdf/jpa2/**"/>
        </jar>
    </target>

    <target name="package-wdf-jpa1-model">
        <jar jarfile="${wdf_test.build.location}/${eclipselink.wdf.jpa1.model}.jar">
            <zipfileset dir="${wdf_test.build.location}/resource/${eclipselink.wdf.jpa1.model}" includes="*.xml" prefix="META-INF"/>
            <fileset dir="${wdf_test.build.location}/${classes.dir}"
                     includes="org/eclipse/persistence/testing/models/wdf/jpa1/**"/>
        </jar>
    </target>

    <!-- Testing -->

    <!-- Clean all build generated content. -->
    <target name="clean-test" description="Clean the test">
        <delete dir="${wdf_test.build.location}/${report.dir}"/>
        <delete dir="${wdf_test.build.location}/${run.dir}"/>
    </target>

    <target name="init_runtime">
        <mkdir dir="${wdf_test.build.location}/${report.dir}"/>
        <mkdir dir="${wdf_test.build.location}/${run.dir}"/>
        <path id="run.path">
            <pathelement path="${jdbc.driver.jar}"/>
            <path refid="compile.path"/>
            <pathelement path="${wdf_test.build.location}/${eclipselink.tests.jar}"/>
            <pathelement path="${wdf_test.build.location}/${eclipselink.wdf.jpa2.model}.jar"/>
            <pathelement path="${wdf_test.build.location}/${eclipselink.wdf.jpa1.model}.jar"/>
            <pathelement path="${wdf_test.build.location}"/>
        </path>
    </target>

    <!-- Default test target, run the LRG -->
    <target name="test-lrg" depends="clean-test">
        <antcall target="run-test" inheritRefs="true">
            <param name="TEST_CLASS" value="${test.class}"/>
            <param name="TEST_AGENT" value="${test.agent}"/>
            <param name="TEST_WEAVING" value="${test.weaving}"/>
            <param name="ORM_TESTING" value="-Dorm.testing=jpa"/>
            <param name="RUN_PATH" value="run.path"/>
            <param name="DB_URL" value="${db.url}"/>
        </antcall>
        <antcall target="generate-report" inheritRefs="true"/>
    </target>

    <!-- Generic target for running tests. -->
    <target name="run-test">
        <echo>Running test on ${DB_URL}</echo>
        <condition property="jvmarg.db.platform" value="-Ddb.platform=${db.platform}">
            <isset property="db.platform"/>
        </condition>
        <condition property="jvmarg.db.platform" value="-Ddummy=dummy">
            <not>
                <isset property="db.platform"/>
            </not>
        </condition>
        <junit printsummary="yes" haltonfailure="yes" fork="yes" forkmode="once" showoutput="true" maxmemory="512m" dir="${run.dir}">
            <jvmarg value="${TEST_AGENT}"/>
            <jvmarg value="${TEST_WEAVING}"/>
            <jvmarg value="${ORM_TESTING}"/>
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Ddb.driver=${db.driver}"/>
            <jvmarg value="-Ddb.url=${DB_URL}"/>
            <jvmarg value="-Ddb.user=${db.user}"/>
            <jvmarg value="-Ddb.pwd=${db.pwd}"/>
            <jvmarg value="${jvmarg.db.platform}"/>
            <classpath>
                <path refid="${RUN_PATH}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}" haltonfailure="no">
                <fileset dir="${src.dir}"
                         includes="org/eclipse/persistence/testing/tests/wdf/**/*Test*.java"
                         excludes="org/eclipse/persistence/testing/tests/wdf/jpa1/query/QueryTest.java"/>
            </batchtest>
        </junit>
    </target>

    <target name="generate-report">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${report.dir}"/>
        </junitreport>
    </target>

</project>
