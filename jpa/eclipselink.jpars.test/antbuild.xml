<?xml version="1.0"?>
<!--/*******************************************************************************
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
* which accompanies this distribution.
* The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
* and the Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*     - properties ending in .jar define jarfile names only (no path)
*     - properties ending in .lib are fully qualified jars (path and filename)
*     - properties ending in .dir are directory paths
*     - properties ending in .path are path refid names (classpath fragments)
*   - multi-word targets use hyphens '-'
*     - targets beginning with test- are reserved for high level test targets,
*       and are used in test results parsing
*     - targets typically use the form <action>-<object>-<type> (ie. package-bundle-zip)
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatinated
*     e.g. 'runpathref'
*   - multi-word tasks (taskdef) names are concatinated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
*
* Contributors:
*     bdoughan, dtwelves, egwin - initial API and implementation from SDO test project
*     tware - modified for jpa rs tests
#******************************************************************************/-->
<project name="eclipselink.jpars.test" default="test" basedir=".">
    <available file="../${ant.project.name}" type="dir" property="jparstest.is.local"/>
    <!-- Test to make sure that the calling script doesn't inherit the variable -->
    <!-- (should be set locally, and be destroyed upon return) -->
    <fail message="Not running from '${ant.project.name}' directory" unless="jparstest.is.local"/>

    <dirname  property="jparstest.build.location" file="${ant.file.eclipselink.jpars.test}"/>
    <echo message="jparstest.build.location = '${jparstest.build.location}'"/>

    <condition property="jparstest.2.base.dir" value="../.." else="..">
        <contains string="${jparstest.build.location}" substring="jpars"/>
    </condition>
    <echo message="jparstest.2.base.dir = '${jparstest.2.base.dir}'"/>
    <property name="jparstest.2.common.plugins.dir" value="${jparstest.2.base.dir}/plugins"/>
    <property name="jparstest.2.jpa.plugins.dir" value="${jparstest.2.base.dir}/jpa/plugins"/>

    <property file="${user.home}/build.properties"/>
    <property file="${jparstest.build.location}/antbuild.properties"/>
    <property file="${eclipselink.jpars.test}/${test.properties}"/>
    <property file="${eclipselink.jpars.test}/test.properties"/>

    <!-- versioning -->
    <!-- These variables  are set in autobuild.xml. A manual build gets defaults -->
    <tstamp>
       <format property="build.date" pattern="yyyyMMdd"/>
       <format property="build.time" pattern="HHmm"/>
    </tstamp>
    <property name="build.type" value="SNAPSHOT"/>
    <property name="svn.revision" value="NA"/>
    <property name="version.string" value="${release.version}.qualifier"/>
    <property name="release.designation"  value="EclipseLink DeveloperBuild"/>

    <property name="jaxb-api.lib"      value="${jparstest.2.common.plugins.dir}/${jaxb-api.jar}"/>
    <property name="persistence20.lib" value="${jparstest.2.jpa.plugins.dir}/${persistence20.jar}"/>
    <property name="jersey.lib"        value="${jparstest.2.common.plugins.dir}/${jersey.jar}"/>
    <property name="javax.ws.rs.lib"   value="${jparstest.2.common.plugins.dir}/${javax.ws.rs.jar}"/>

    <!-- path to OSGi Bundle compile dependencies -->
    <path id="jparstest.bundle.compile.path">
        <fileset
            dir="${jparstest.2.common.plugins.dir}"
            includes="
               org.eclipse.persistence.core_${version.string}.jar,
               org.eclipse.persistence.moxy_${version.string}.jar,
               org.eclipse.persistence.jpa_${version.string}.jar,
               org.eclipse.persistence.jpars_${version.string}.jar,
               org.eclipse.persistence.core.jpql_${version.string}.jar,
               org.eclipse.persistence.jpa.jpql_${hermes.version.string}.jar
            "/>
            <pathelement path="${jparstest.2.common.plugins.dir}/${antlr}"/>
    </path>
    <!-- compile path without product components -->
    <path id="jparstest.thirdparty.compile.path">
        <fileset
            dir="${jparstest.2.common.plugins.dir}"
            includes="
               ${eclipselink.core.depend}
            "/>
        <pathelement path="${junit.lib}"/>
        <pathelement path="${jaxb-api.lib}"/>
        <pathelement path="${persistence20.lib}"/>
        <pathelement path="${jersey.lib}"/>
        <pathelement path="${javax.ws.rs.lib}"/>
        <pathelement path="${jdbc.driver.jar}"/>
    </path>
    <!-- Run path without product components -->
    <path id="jparstest.thirdparty.run.path">
        <pathelement path="${resource.dir}"/>
        <pathelement path="${classes.dir}"/>
        <pathelement path="${jparstest.2.common.plugins.dir}/${asm}"/>
    </path>

    <!-- Set Compile/Run Paths using product OSGi bundles -->
    <path id="jparstest.compile.path">
        <path refid="jparstest.bundle.compile.path"/>
        <path refid="jparstest.thirdparty.compile.path"/>
    </path>
    <path id="jparstest.run.path">
        <path refid="jparstest.compile.path"/>
        <path refid="jparstest.thirdparty.run.path"/>
    </path>

    <!-- The following compile/run paths reference eclipselink.jar for non-test classes and resources -->
    <path id="jparstest.compile.against.jar.path">
        <pathelement path="${jparstest.2.base.dir}/${eclipselink.jar}"/>
        <pathelement path="${jparstest.2.common.plugins.dir}/org.eclipse.persistence.jpars_${version.string}.jar"/>
        <path refid="jparstest.thirdparty.compile.path"/>
    </path>
    <path id="jparstest.run.against.jar.path">
        <path refid="jparstest.compile.against.jar.path"/>
        <path refid="jparstest.thirdparty.run.path"/>
    </path>

    <!-- Test for Third-party dependencies -->
    <available file="${jaxb-api.lib}"      property="jaxb-api.lib.exist"/>
    <available file="${persistence20.lib}" property="persistence20.lib.exist"/>
    <available file="${jersey.lib}"        property="jersey.lib.exist"/>
    <available file="${javax.ws.rs.lib}"   property="javax.ws.rs.lib.exist"/>

    <!-- Test for Eclipselink dependencies -->
    <available file="${jparstest.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar" property="core.bundle.exist"/>
    <available file="${jparstest.2.common.plugins.dir}/org.eclipse.persistence.moxy_${version.string}.jar" property="moxy.bundle.exist"/>
    <available file="${jparstest.2.common.plugins.dir}/org.eclipse.persistence.jpa_${version.string}.jar" property="jpa.bundle.exist"/>
    <available file="${jparstest.2.common.plugins.dir}/org.eclipse.persistence.jpars_${version.string}.jar" property="jpars.bundle.exist"/>
    <available file="${jparstest.2.base.dir}/${eclipselink.jar}" property="eclipselink.jar.exist"/>

    <!-- Clean targets -->
    <target name="clean" description="clean the build">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${classes.dir}"/>
        </delete>
        <mkdir dir="${classes.dir}"/>
    </target>

    <!-- Build targets -->
    <target name="compile-jpars-tests-against-jar" depends="clean" description="build jpars test classes against eclipselink.jar">
        <fail message="Cannot find JAXB-API: '${jaxb-api.lib}'."                unless="jaxb-api.lib.exist"/>
        <fail message="Cannot find javax.persistence: '${persistence20.lib}'."  unless="persistence20.lib.exist"/>
        <fail message="Cannot find Jersey: '${jersey.lib}'."                    unless="jersey.lib.exist"/>
        <fail message="Cannot find javax.ws.rs: '${javax.ws.rs.lib}'."          unless="javax.ws.rs.lib.exist"/>

        <fail message="Cannot find EclipseLink: '${jparstest.2.base.dir}/${eclipselink.jar}'." unless="eclipselink.jar.exist"/>
        <fail message="Cannot find JPARS: '${jparstest.2.common.plugins.dir}/org.eclipse.persistence.jpars_${version.string}.jar'." unless="jpars.bundle.exist"/>
        <compile_jpars_tests compilepathref="jparstest.compile.against.jar.path"/>
    </target>
    <target name="compile-jpars-tests" depends="clean" description="build jpars test classes">
        <fail message="Cannot find JAXB-API: '${jaxb-api.lib}'."                unless="jaxb-api.lib.exist"/>
        <fail message="Cannot find javax.persistence: '${persistence20.lib}'."  unless="persistence20.lib.exist"/>
        <fail message="Cannot find Jersey: '${jersey.lib}'."                    unless="jersey.lib.exist"/>
        <fail message="Cannot find javax.ws.rs: '${javax.ws.rs.lib}'."          unless="javax.ws.rs.lib.exist"/>

        <fail message="Cannot find CORE: '${jparstest.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar'."   unless="core.bundle.exist"/>
        <fail message="Cannot find MOXY: '${jparstest.2.common.plugins.dir}/org.eclipse.persistence.moxy_${version.string}.jar'."   unless="moxy.bundle.exist"/>
        <fail message="Cannot find JPA: '${jparstest.2.common.plugins.dir}/org.eclipse.persistence.jpa_${version.string}.jar'."     unless="jpa.bundle.exist"/>
        <fail message="Cannot find JPARS: '${jparstest.2.common.plugins.dir}/org.eclipse.persistence.jpars_${version.string}.jar'." unless="jpars.bundle.exist"/>
        <compile_jpars_tests compilepathref="jparstest.compile.path"/>
    </target>

    <!-- Run targets -->
    <target name="test" depends="compile-jpars-tests" description="run jpars tests">
        <mkdir dir="${resource.dir}/${tmp.dir}"/>
        <run_jpars_tests runpathref="jparstest.run.path"/>
        <delete dir="${resource.dir}/${tmp.dir}"/>
    </target>
    <target name="test-against-jar" depends="compile-jpars-tests-against-jar" description="run jpars tests against eclipselink.jar">
        <mkdir dir="${resource.dir}/${tmp.dir}"/>
        <run_jpars_tests runpathref="jparstest.run.against.jar.path"/>
        <delete dir="${resource.dir}/${tmp.dir}"/>
    </target>

    <!-- Test run macros -->
    <macrodef name="run_jpars_tests">
        <attribute name="runpathref"/>
        <sequential>
            <delete dir="${report.dir}"/>
            <mkdir dir="${report.dir}"/>
            <mkdir dir="${jparstest.build.location}/${classes.dir}/META-INF"/>
            <copy todir="${jparstest.build.location}/${classes.dir}/META-INF">
                <fileset dir="${jparstest.build.location}/${src.dir}/META-INF" includes="**"/>
            </copy>
            <!-- Fix for 290177 below removed temporarily to avoid out-of-memeory issues with LRG run -->
            <!-- junit printsummary="withOutAndErr" fork="yes" forkmode="once" dir="${resource.dir}" maxmemory="512m" showoutput="yes" -->
            <junit printsummary="withOutAndErr" fork="yes" dir="${classes.dir}" maxmemory="512m" showoutput="yes">
                <jvmarg value="-XX:MaxPermSize=256m"/>
                <sysproperty key="loggingLevelFinest" value="false"/>
                <sysproperty key="tempFileDir" value="${tmp.dir}"/>
                <sysproperty key="ignoreCRLF" value="true"/>
                <sysproperty key="useLogging" value="false"/>
                <sysproperty key="useSAXParsing" value="true"/>
                <sysproperty key="useDeploymentXML" value="false"/>
                <sysproperty key="test.properties" value="${jparstest.build.location}/test.properties"/>
                <sysproperty key="jpars.xmlfile.directory" value="META-INF/xmldocs/"/>

                <batchtest todir="${report.dir}">
                    <fileset dir="${src.dir}">
                        <include name="org/eclipse/persistence/jpars/test/AllJavaSETests.java"/>
                    </fileset>
                    <formatter type="xml"/>
                </batchtest>
                <classpath refid="@{runpathref}"/>
            </junit>
            <!-- Create JUnit report -->
            <mkdir dir="${report.dir}"/>
            <junitreport todir="${report.dir}">
                <fileset dir="${report.dir}">
                    <include name="**/*.xml"/>
                </fileset>
                <report format="noframes" todir="${report.dir}"/>
            </junitreport>
        </sequential>
    </macrodef>

    <!-- Compile macros -->
    <macrodef name="compile_jpars_tests">
        <attribute name="compilepathref"/>
        <sequential>
            <javac
                srcdir="${src.dir}"
                destdir="${classes.dir}"
                debug="${javac.debug}"
                debuglevel="${javac.debuglevel}"
                optimize="${javac.optimize}"
                source="${javac.version}"
                target="${javac.version}"
                deprecation="${javac.deprecation}"
                failonerror="true"
                includes="org/eclipse/persistence/jpars/test/**/*.java">
                <classpath>
                    <path refid="@{compilepathref}"/>
                </classpath>
            </javac>
        </sequential>
    </macrodef>
</project>