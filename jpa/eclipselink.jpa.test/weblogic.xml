<!--/*******************************************************************************
* This program and the accompanying materials are made available under the 
* terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0 
* which accompanies this distribution. 
* The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
* and the Eclipse Distribution License is available at 
* http://www.eclipse.org/org/documents/edl-v10.php.
*
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*     - properties ending in .jar define jarfile names only (no path)
*     - properties ending in .lib are fully qualified jars (path and filename)
*     - properties ending in .dir are directory paths
*     - properties ending in .path are path refid names (classpath fragments)
*   - multi-word targets use hyphens '-'
*     - targets beginning with test- are reserved for high level test targets,
*       and are used in test results parsing
*     - targets typically use the form <action>-<object>-<type> (ie. package-bundle-zip)
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatinated
*     e.g. 'runpathref'  
*   - multi-word tasks (taskdef) names are concatinated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
*
* Contributors:
*     tware - initial API and implementation
#******************************************************************************/-->

<!-- This ant project includes the following tasks:
        - weblogic-install : recreates server and adds jars
        - weblogic-setup : creates connection pool
        - weblogic-reset : removes connection pool
        - weblogic-start : starts server
        - weblogic-stop : stops server
        - weblogic-deploy : deploys ear
        - weblogic-undeploy : undeploys ear

        It requires some configuration of the weblogic.properties, it should be run through build.xml, not directly.
        Also weblogic may require using the JRockit JVM, which can be setup through the setEnv.sh.
        You may need to copy the /resouces/weblogic/jaxp.properties file to your JRockit JVM jre/lib directory to allow the ant junit task to work correctly,
        (this may cause issues with weblogic starting, so you may need to do this after you start your server).
        To connect to the weblogic admin console use http://${weblogic.host}:7001/console, this may be useful for debugging deployment failures.
        Sometimes if a test or deployment fails, you server gets screwed up and you need to re-install your domain (ant server.install).
-->

<project name="Eclipse Persistence Services JPA WLS Testing" basedir=".">

    <property name="env" environment="env" value="env"/>
    <!-- Allows a user to overide certain user specific properties. -->
    <property file="${user.home}/weblogic.properties"/>
    <property file="./test.properties"/>
    <property file="./weblogic.properties"/>
    <property name="eclipselink.lib" value="../../${eclipselink.jar}"/>

    <condition property="is.v1030">
        <contains string="${server.version}" substring="10.3.0"/>
    </condition>

    <!-- WebLogic ant tasks -->
    <taskdef name="wlserver" classname="weblogic.ant.taskdefs.management.WLServer">
        <classpath>
            <pathelement location="${weblogic.home}/lib/weblogic.jar"/>
        </classpath>
    </taskdef>
    <taskdef name="wlconfig" classname="weblogic.ant.taskdefs.management.WLConfig">
        <classpath>
            <pathelement location="${weblogic.home}/lib/weblogic.jar"/>
        </classpath>
    </taskdef>
    <taskdef name="wldeploy" classname="weblogic.ant.taskdefs.management.WLDeploy">
        <classpath>
            <pathelement location="${weblogic.home}/lib/weblogic.jar"/>
        </classpath>
    </taskdef>

    <!-- This creates the server domain. -->
    <target name="weblogic-install">
        <delete dir="${weblogic.domain}"/>
        <mkdir dir="${weblogic.domain}"/>
        <antcall target="weblogic-start-nosleep" inheritRefs="true"/>
        <copy file="${junit.lib}" todir="${weblogic.domain}/lib"/>
        <antcall target="copy-eclipselink-jar-to-domain-lib" inheritRefs="true"/>
        <copy file="${oracle.extensions.depend.dir}/${oracle.xdb.jar}" todir="${weblogic.domain}/lib"/>
        <copy file="${oracle.extensions.depend.dir}/${oracle.sdoapi.jar}" todir="${weblogic.domain}/lib"/>
        <copy file="${oracle.extensions.depend.dir}/${oracle.xmlparser.jar}" todir="${weblogic.domain}/lib"/>
        <antcall target="weblogic-stop" inheritRefs="true"/>
    </target>

    <target name="copy-eclipselink-jar-to-domain-lib" if="is.v1030">
        <copy file="${eclipselink.lib}" todir="${weblogic.domain}/lib"/>
    </target>

    <!-- Start the server. -->
    <target name="weblogic-start" depends="weblogic-start-nosleep">
        <echo>WebLogic Server has been started ......</echo>
        <sleep hours="2"/>
    </target>

    <target name="weblogic-start-nosleep">
        <wlserver fork="true" spawn="true" weblogichome="${weblogic.home}"
            dir="${weblogic.domain}" host="${weblogic.host}" generateConfig="true" verbose="true"
            username="${server.user}" password="${server.pwd}" action="start">
            <classpath>
                <!--this path is used for WebLogic JPA2.0 support-->
                <pathelement path="${server.persistence20.lib}/${server.persistence20.jar}"/>
                <fileset dir="${server.lib}" includes="${server.depend}"/>
                <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
            </classpath>
            <jvmarg value="-Xms768m"/>
            <jvmarg value="-Xmx960m"/>
            <!-- Using the following instead of above "jvmarg" setting when using SUN jdk because jrockit doesn't support PermSize
            <jvmarg value="-XX:PermSize=128m"/>
            <jvmarg value="-XX:MaxPermSize=256m"/>
            -->
            <!--jvmarg value="-Xdebug"/-->
            <!--jvmarg value="-Xnoagent"/-->
            <!--jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=4000"/-->
            <!--sysproperty key="http.proxyHost" value="www-proxy.us.oracle.com"/-->
            <!--sysproperty key="http.proxyPort" value="80"/-->
            <sysproperty key="eclipselink.logging.level" value="${logging.level}"/>
            <sysproperty key="ejb.lookup" value="${ejb.lookup}"/>
            <sysproperty key="is.JTA" value="${is.JTA}"/>
        </wlserver>
    </target>

    <!--
        This target is to create connection pool and managed datasource required for running JPA tests on the WLS server.
        Note: WLS server must be running.
    -->
    <target name="weblogic-setup">
        <wlconfig url="${server.admin.url}" username="${server.user}" password="${server.pwd}">
            <query domain="mydomain" type="Server" name="myserver" property="myserver"/>
            <create type="JDBCConnectionPool" name="ejbPool">
                <set attribute="CapacityIncrement" value="2"/>
                <set attribute="DriverName" value="${db.driver}"/>
                <set attribute="InitialCapacity" value="1"/>
                <set attribute="MaxCapacity" value="50"/>
                <set attribute="Password" value="${db.pwd}"/>
                <set attribute="Properties" value="user=${db.user}"/>
                <set attribute="URL" value="${db.url}"/>
                <set attribute="Targets" value="${myserver}"/>
            </create>
            <create type="JDBCTxDataSource" name="EclipseLinkDS">
                <set attribute="JNDIName" value="jdbc/EclipseLinkDS"/>
                <set attribute="PoolName" value="ejbPool"/>
                <set attribute="Targets" value="${myserver}"/>
            </create>
            <create type="JDBCDataSource" name="ELNonJTADS">
                <set attribute="JNDIName" value="jdbc/ELNonJTADS"/>
                <set attribute="PoolName" value="ejbPool"/>
                <set attribute="Targets" value="${myserver}"/>
            </create>
        </wlconfig>
    </target>

	<target name="weblogic-domain-setup">
        <wlconfig url="${server.admin.url}" username="${server.user}" password="${server.pwd}">
           <query domain="mydomain" type="JPA" name="mydomain" property="jpaprovider"/>
		   <set mbean="${jpaprovider}" attribute="DefaultJPAProvider" value="org.eclipse.persistence.jpa.PersistenceProvider"/>
        </wlconfig>
    </target>

    <!--
        This target is to remove the connection pool and managed datasource created by target <weblogic-setup>
        Note: WLS server must be running.
    -->
    <target name="weblogic-reset">
        <wlconfig url="${server.admin.url}" username="${server.user}" password="${server.pwd}">
            <query domain="mydomain" type="JDBCDataSource" name="ELNonJTADS">
                <delete/>
            </query>
            <query domain="mydomain" type="JDBCTxDataSource" name="EclipseLinkDS">
                <delete/>
            </query>
            <query domain="mydomain" type="JDBCConnectionPool" name="ejbPool">
                <delete/>
            </query>
        </wlconfig>
    </target>

	<target name="weblogic-domain-reset">
        <wlconfig url="${server.admin.url}" username="${server.user}" password="${server.pwd}">
           <query domain="mydomain" type="JPA" name="mydomain" property="jpaprovider"/>
		   <set mbean="${jpaprovider}" attribute="DefaultJPAProvider" value="org.apache.openjpa.persistence.PersistenceProviderImpl"/>
        </wlconfig>
    </target>

    <!-- Stop the server. -->
    <target name="weblogic-stop">
        <wlserver fork="true" failonerror="false" weblogichome="${weblogic.home}"
            dir="${weblogic.domain}" host="${weblogic.host}"
            username="${server.user}" password="${server.pwd}" action="shutdown">
        </wlserver>
    </target>

    <!--
        Deploy the application ear to the server.
        Note: WLS server must be running.
    -->
    <target name="weblogic-deploy">
        <wldeploy action="deploy"
            name="${application.name}" source="${ear.name}"
            user="${server.user}" password="${server.pwd}"
            adminurl="${server.admin.url}" targets="${target.server}"
            failonerror="false">
        </wldeploy>
    </target>

    <!--
        Undeploy the application ear to the server.
        Note: WLS server must be running.
    -->
    <target name="weblogic-undeploy">
        <wldeploy action="undeploy" name="${application.name}"
            user="${server.user}" password="${server.pwd}"
            adminurl="${server.admin.url}"
            failonerror="false">
        </wldeploy>
    </target>

</project>
