package org.eclipse.persistence.testing.tests.failover.emulateddriver;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Vector;

public class EmulatedConnection implements Connection {
	protected EmulatedDriver driver;

	protected boolean inFailureState = false;

	public void causeCommError() {
		this.inFailureState = true;
	}

	public boolean isInFailureState() {
		return this.inFailureState;
	}

	public EmulatedConnection(EmulatedDriver driver) {
		this.driver = driver;
	}

	public Statement createStatement() {
		return new EmulatedStatement(this);
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency) {
		return new EmulatedStatement(this);
	}

	public PreparedStatement prepareStatement(String sql) {
		return new EmulatedStatement(sql, this);
	}

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability) {
		return new EmulatedStatement(this);
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
		return new EmulatedStatement(sql, this);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) {
		return new EmulatedStatement(sql, this);
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability) {
		return new EmulatedStatement(sql, this);
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) {
		return new EmulatedStatement(sql, this);
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) {
		return new EmulatedStatement(sql, this);
	}

	/**
	 * Return the rows for the sql.
	 */
	public Vector getRows(String sql) {
		Vector rows = (Vector) this.driver.getRows().get(sql);
		if (rows == null) {
			rows = new Vector(0);
		}
		return rows;
	}

	/**
	 * Return the rows for the sql.
	 */
	public void putRows(String sql, Vector rows) {
		this.driver.getRows().put(sql, rows);
	}

	public CallableStatement prepareCall(String sql) {
		return null;
	}

	public String nativeSQL(String sql) {
		return sql;
	}

	public void setAutoCommit(boolean autoCommit) {
	}

	public boolean getAutoCommit() {
		return false;
	}

	public void commit() {
	}

	public void rollback() {
	}

	public void close() {
	}

	public boolean isClosed() {
		return false;
	}

	public DatabaseMetaData getMetaData() {
		return null;
	}

	public void setReadOnly(boolean readOnly) {
	}

	public boolean isReadOnly() {
		return false;
	}

	public void setCatalog(String catalog) {
	}

	public String getCatalog() {
		return null;
	}

	public void setTransactionIsolation(int level) {
	}

	public int getTransactionIsolation() {
		return 0;
	}

	public SQLWarning getWarnings() {
		return null;
	}

	public void clearWarnings() {
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) {
		return null;
	}

	public java.util.Map getTypeMap() {
		return null;
	}

	public void setTypeMap(java.util.Map map) {
	}

	public void setHoldability(int holdability) {
	}

	public int getHoldability() {
		return 0;
	}

	public Savepoint setSavepoint() {
		return null;
	}

	public Savepoint setSavepoint(String name) {
		return null;
	}

	public void rollback(Savepoint savepoint) {
		return;
	}

	public void releaseSavepoint(Savepoint savepoint) {
		return;
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability) {
		return null;
	}

}
