<!-- This ant project includes the following tasks:
        - all (default) : compiles all tests, translates resources
        - compile : compiles all tests
        - process.resource : translates login info in resources into run directory
        - test : runs LRG
        - test.lrg : runs LRG
        - test.srg : runs SRG

        It requires some configuration of the build.properties and test.properties to run.
    -->
<project name="Eclipse Persistence Services Testing" default="all" basedir=".">

    <!-- Allows tools.jar to be relative to JAVA_HOME. -->
    <property environment="env"/>

    <!-- Allows a user to overide certain user specific properties. -->
    <property file="${user.home}/build.properties"/>
    <property file="${user.home}/test.properties"/>
    <property name="eclipselink.core.test" value="."/>
    <property file="${eclipselink.core.test}/build.properties"/>
    <property file="${eclipselink.core.test}/${test.properties}"/>
    <property file="${eclipselink.core.test}/test.properties"/>

    <!-- Classpath used for compiling tests, also used in running tests. -->
    <path id="compile.path">
        <pathelement path="${eclipselink.core.lib}/eclipselink-antlr.jar"/>
        <pathelement path="${eclipselink.core.lib}/eclipselink-asm.jar"/>
        <pathelement path="${junit.lib}"/>
        <fileset
            dir="${eclipselink.core.lib}"
            includes="${eclipselink.core.depend}"/>
        <pathelement path="${eclipselink.core}/${classes.dir}"/>
        <pathelement path="${eclipselink.jar}"/>
    </path>

    <!-- Default ant target, compiles and translates resources, does not run tests. -->
    <target name="all" depends="clean, package" description="build EclipseLink jar"/>

    <!-- Compiles all tests. -->
    <target name="compile" depends="" description="compile EclipseLink core tests">  
        <mkdir dir="${eclipselink.core.test}/${classes.dir}"/>
        <javac srcdir="${eclipselink.core.test}/${src.dir}" 
               destdir="${eclipselink.core.test}/${classes.dir}"
               includes="org/eclipse/persistence/**, deprecated/**"
               debug="${javac.debug}" 
               optimize="${javac.optimize}"
               source="1.5" 
               deprecation="${javac.deprecation}"
               failonerror="true"
               memoryMaximumSize="512m"
               fork="true">
            <classpath>
                <path refid="compile.path"/>
            </classpath>
        </javac>
    </target>

    <!-- Translates the login information in the resources into the run directory. -->
    <target name="process.resource">
        <filter token="dbUser" value="${db.user}"/>
        <filter token="dbPassword" value="${db.pwd}"/>
        <filter token="driverClass" value="${db.driver}"/>
        <filter token="dbURL" value="${db.url}"/>
        <filter token="loglevel" value="${logging.level}"/>
        <filter token="boolvalue" value="${logging.boolvalue}"/>
        <filter token="dbPlatform" value="${db.platform}"/>
        <copy todir="${eclipselink.core.test}/${run.dir}" filtering="true" overwrite="true">
            <fileset dir="${eclipselink.core.test}/${resource.dir}"
                excludes="**/Employee_utf16.xml, **/NLSJapaneseMWIntegrationTestEmployeeProject.xml"/>
         </copy>
         <copy todir="${eclipselink.core.test}/${run.dir}" filtering="true" overwrite="true" encoding="UTF-16">
            <fileset dir="${eclipselink.core.test}/${resource.dir}" includes="**/Employee_utf16.xml"/>
         </copy>
          <copy todir="${eclipselink.core.test}/${run.dir}" filtering="true" overwrite="true" encoding="Shift_JIS">
            <fileset dir="${eclipselink.core.test}/${resource.dir}" includes="**/NLSJapaneseMWIntegrationTestEmployeeProject.xml"/>
         </copy>
    </target>


    <!-- Packages tests jar. -->
    <target name="package" depends="compile, process.resource" description="jat tests">
        <jar jarfile="${eclipselink.core.test}/${eclipselink.tests.jar}">
           <fileset dir="${eclipselink.core.test}/${classes.dir}"/>
           <fileset dir="${eclipselink.core.test}/${run.dir}"/>
        </jar>
    </target>

    <!-- Clean all build generated content. -->
    <target name="clean" description="Clean the build">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${eclipselink.core.test}/${classes.dir}"/>
            <fileset dir="${eclipselink.core.test}/${run.dir}"/>
        </delete>
    </target>

    <!-- Testing -->

    <!-- Classpath used for running tests. -->
    <path id="run.classpath">
        <pathelement path="${eclipselink.core.test}/${classes.dir}"/>
        <pathelement path="${eclipselink.core.test}/${run.dir}"/>
        <path refid="compile.path"/>
        <pathelement path="${eclipselink.core}/${resource.dir}"/>
        <pathelement path="${eclipselink.jar}"/>
        <pathelement path="${eclipselink.core.test}/${eclipselink-tests.jar}"/>
        <pathelement path="${jdbc.driver.jar}"/>
        <pathelement path="${tools.jar}"/>
    </path>

    <!-- Default test target, runs test.class from test.properties (default is LRG). -->
    <target name="test">
        <antcall target="run.test" inheritRefs="true">
            <param name="TEST_CLASS" value="${test.class}"/>
        </antcall>
    </target>

    <!-- Runs SRG (SRGTestModel). -->
    <target name="test.srg">
        <antcall target="run.test" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.SRGTestModel"/>
        </antcall>
    </target>

    <!-- Runs LRG (TestRunModel). -->
    <target name="test.lrg">
        <antcall target="run.test" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.TestRunModel"/>
        </antcall>
    </target>

    <!-- Prompt runner test target, runs test.class from test.properties (default is LRG). -->
    <target name="test.prompt">
        <antcall target="run.test.prompt" inheritRefs="true">
            <param name="TEST_CLASS" value="${test.class}"/>
        </antcall>
    </target>

    <!-- Runs performance tests. -->
    <target name="test.performance">
        <antcall target="run.test.prompt" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.performance.PerformanceTestModel"/>
        </antcall>
    </target>

    <!-- Runs concurrency tests. -->
    <target name="test.concurrency">
        <antcall target="run.test.prompt" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.performance.ConcurrencyComparisonTestModel"/>
        </antcall>
    </target>

    <!-- Launches the testing browser -->
    <target name="test.browser">
        <echo>Running test browser with ${test.properties}</echo>
        <mkdir dir="${eclipselink.core.test}/${run.dir}"/>
        <mkdir dir="${eclipselink.core.test}/${report.dir}"/>
        <java classname="org.eclipse.persistence.testing.framework.ui.TestingBrowserFrame"
             fork="true"
             maxmemory="512m"
             failonerror="true"
             dir="${eclipselink.core.test}/${run.dir}">
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Dtest.properties=${test.properties.run}"/>
            <jvmarg value="-Djava.security.manager"/>
            <jvmarg value="-Djava.security.policy=./java.policy.allpermissions"/>
            <classpath>
                <path refid="run.classpath"/>
            </classpath>
        </java>
    </target>

    <!-- Generic target for running tests. -->
    <target name="run.test">
        <echo>Running test with ${test.properties} on ${db.url}</echo>
        <mkdir dir="${eclipselink.core.test}/${run.dir}"/>
        <mkdir dir="${eclipselink.core.test}/${report.dir}"/>
        <junit printsummary="yes" failureproperty="junit.failed" fork="yes" showoutput="true" maxmemory="512m" dir="${eclipselink.core.test}/${run.dir}">
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Dtest.properties=${test.properties.run}"/>
            <jvmarg value="-Djava.security.manager"/>
            <jvmarg value="-Djava.security.policy=./java.policy.allpermissions"/>
            <classpath>
                <path refid="run.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <test name="${TEST_CLASS}" haltonfailure="no" outfile="${eclipselink.core.test}/${report.dir}/test-results">
            </test>
        </junit>
        <junitreport todir="${eclipselink.core.test}/${report.dir}">
            <fileset dir="${eclipselink.core.test}/${report.dir}">
                <include name="test-results.xml"/>
            </fileset>
            <report format="noframes" todir="${eclipselink.core.test}/${report.dir}"/>
        </junitreport>
        <fail message="Some of the junit tests failed.  See the ${report.dir}/junit-noframes.html file for details." if="junit.failed"/>
    </target>

    <!-- Runs the test using the PromptTestRunner -->
    <target name="run.test.prompt">
        <echo>Running test with ${test.properties} on ${db.url}</echo>
        <mkdir dir="${eclipselink.core.test}/${run.dir}"/>
        <mkdir dir="${eclipselink.core.test}/${report.dir}"/>
        <java classname="org.eclipse.persistence.testing.framework.PromptTestRunner"
             fork="true"
             maxmemory="512m"
             failonerror="true"
             dir="${eclipselink.core.test}/${run.dir}">
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Dtest.properties=${test.properties.run}"/>
            <jvmarg value="${test.security-manager}"/>
            <jvmarg value="${test.security-manager.policy}"/>
            <arg value="pfile=${test.properties.run}" />
            <arg value="testmodel=${TEST_CLASS}" />
            <arg value="regressionlog=../${report.dir}/test.log" />
            <arg value="saveresults=true" />
            <classpath>
                <path refid="run.classpath"/>
            </classpath>
        </java>
    </target>

</project>