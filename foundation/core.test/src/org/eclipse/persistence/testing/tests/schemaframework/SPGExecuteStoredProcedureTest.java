/*******************************************************************************
 * Copyright (c) 1998, 2007 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0, which accompanies this distribution
 * and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Contributors:
 *     Oracle - initial API and implementation from Oracle TopLink
 ******************************************************************************/  
package org.eclipse.persistence.testing.tests.schemaframework;

import org.eclipse.persistence.queries.*;
import org.eclipse.persistence.testing.framework.*;

/**
 * Author: Edwin Tang
 * The test executes and verifies the stored procedures in the database 
 * generated by SPGGenerateAmendmentClassTest.
 */
public class SPGExecuteStoredProcedureTest extends TestCase {
    boolean shouldBindAllParameters;
    int insertSuccess = 1;
    int updateSuccess = 1;
    int deleteSuccess = 1;
    String parameterNamePrefix;
    static final Integer menuID = new Integer(99);
    static final Integer restaurantID = new Integer(100);
    static final Integer dinerID = new Integer(101);
    static final Integer personID = new Integer(102);
    static final Integer locationID = new Integer(103);
    static final Integer waiterID = new Integer(104);
    static final Integer menuItemID = new Integer(105);
    static final String menuType = "Lunch";
    static final String menuTypeUpdate = "Dinner";
    static final String dinerFirstName = "Steve";
    static final String dinerFirstNameUpdate = "Stephen";
    static final String dinerLastName = "McDonald";
    static final String dinerClass = "B";
    static final String personFirstName = "Dan";
    static final String personFirstNameUpdate = "Danial";
    static final String personLastName = "Smith";
    static final String personClass = "A";
    static final String locationArea = "Downtown";
    static final String locationAreaUpdate = "Southeastern";
    static final String locationCity = "Ottawa";
    static final String waiterFirstName = "Joel";
    static final String waiterLastName = "Clark";
    static final String waiterSpeciality = "Speaking Spanish";
    static final String waiterSpecialityUpdate = "Speaking Spanish and Italian";
    static final String waiterClass = "A";
    static final String menuItemName = "Roasted beef and potato";
    static final Float menuItemPrice = new Float(20.99f);
    static final Float menuItemPriceUpdate = new Float(22.99f);
    static final String restaurantName = "May Flower";
    static final String restaurantNameUpdate = "Great Wall Restaurant";

    public SPGExecuteStoredProcedureTest() {
    }

    public void setup() {
        if(getSession().getDatasourcePlatform().isOracle()) 
        {
          parameterNamePrefix = "P_";
        } else 
        {
          parameterNamePrefix = "";
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_Menu");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuID);
        call.addNamedArgumentValue(parameterNamePrefix + "REST_ID",restaurantID);
        call.addNamedArgumentValue(parameterNamePrefix + "TYPE",menuType);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_Diner");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",dinerID);
        call.addNamedArgumentValue(parameterNamePrefix + "F_NAME",dinerFirstName);
        call.addNamedArgumentValue(parameterNamePrefix + "CLASS",dinerClass);
        call.addNamedArgumentValue(parameterNamePrefix + "L_NAME",dinerLastName);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_Person");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",personID);
        call.addNamedArgumentValue(parameterNamePrefix + "F_NAME",personFirstName);
        call.addNamedArgumentValue(parameterNamePrefix + "CLASS",personClass);
        call.addNamedArgumentValue(parameterNamePrefix + "L_NAME",personLastName);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_Location");
        call.addNamedArgumentValue(parameterNamePrefix + "AREA",locationArea);
        call.addNamedArgumentValue(parameterNamePrefix + "ID",locationID);
        call.addNamedArgumentValue(parameterNamePrefix + "CITY",locationCity);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_Waiter");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",waiterID);
        call.addNamedArgumentValue(parameterNamePrefix + "F_NAME",waiterFirstName);
        call.addNamedArgumentValue(parameterNamePrefix + "SPECIALT",waiterSpeciality);
        call.addNamedArgumentValue(parameterNamePrefix + "CLASS",waiterClass);
        call.addNamedArgumentValue(parameterNamePrefix + "W_RST_ID",restaurantID);
        call.addNamedArgumentValue(parameterNamePrefix + "L_NAME",waiterLastName);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_MenuItem");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuItemID);
        call.addNamedArgumentValue(parameterNamePrefix + "MENU_ID",menuID);
        call.addNamedArgumentValue(parameterNamePrefix + "PRICE",menuItemPrice);
        call.addNamedArgumentValue(parameterNamePrefix + "NAME",menuItemName);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("INS_Restaurant");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",restaurantID);
        call.addNamedArgumentValue(parameterNamePrefix + "NAME",restaurantName);
        insertSuccess = insertSuccess * getSession().executeNonSelectingCall(call);
        }
    }

    public void test() {
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_Menu");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuID);
        call.addNamedArgumentValue(parameterNamePrefix + "REST_ID",restaurantID);
        call.addNamedArgumentValue(parameterNamePrefix + "TYPE",menuTypeUpdate);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_Diner");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",dinerID);
        call.addNamedArgumentValue(parameterNamePrefix + "F_NAME",dinerFirstNameUpdate);
        call.addNamedArgumentValue(parameterNamePrefix + "CLASS",dinerClass);
        call.addNamedArgumentValue(parameterNamePrefix + "L_NAME",dinerLastName);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_Person");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",personID);
        call.addNamedArgumentValue(parameterNamePrefix + "F_NAME",personFirstNameUpdate);
        call.addNamedArgumentValue(parameterNamePrefix + "CLASS",personClass);
        call.addNamedArgumentValue(parameterNamePrefix + "L_NAME",personLastName);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_Location");
        call.addNamedArgumentValue(parameterNamePrefix + "AREA",locationAreaUpdate);
        call.addNamedArgumentValue(parameterNamePrefix + "ID",locationID);
        call.addNamedArgumentValue(parameterNamePrefix + "CITY",locationCity);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_Waiter");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",waiterID);
        call.addNamedArgumentValue(parameterNamePrefix + "F_NAME",waiterFirstName);
        call.addNamedArgumentValue(parameterNamePrefix + "SPECIALT",waiterSpecialityUpdate);
        call.addNamedArgumentValue(parameterNamePrefix + "CLASS",waiterClass);
        call.addNamedArgumentValue(parameterNamePrefix + "W_RST_ID",restaurantID);
        call.addNamedArgumentValue(parameterNamePrefix + "L_NAME",waiterLastName);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_MenuItem");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuItemID);
        call.addNamedArgumentValue(parameterNamePrefix + "MENU_ID",menuID);
        call.addNamedArgumentValue(parameterNamePrefix + "PRICE",menuItemPriceUpdate);
        call.addNamedArgumentValue(parameterNamePrefix + "NAME",menuItemName);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("UPD_Restaurant");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",restaurantID);
        call.addNamedArgumentValue(parameterNamePrefix + "NAME",restaurantNameUpdate);
        updateSuccess = updateSuccess * getSession().executeNonSelectingCall(call);
        }
    }

    public void reset() {
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_Menu");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("D_1M_Menu_items");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_Diner");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",dinerID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_Person");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",personID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_Location");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",locationID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_Waiter");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",waiterID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_MenuItem");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",menuItemID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("DEL_Restaurant");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",restaurantID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("D_1M_Restaurant_waiters");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",restaurantID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
        {
        StoredProcedureCall call = new StoredProcedureCall();
        call.setProcedureName("D_1M_Restaurant_menus");
        call.addNamedArgumentValue(parameterNamePrefix + "ID",restaurantID);
        deleteSuccess = deleteSuccess * getSession().executeNonSelectingCall(call);
        }
    }

    public void verify() {
        if(insertSuccess * updateSuccess * deleteSuccess == 0 ) {
          throw new TestErrorException("Failed to call stored procedures.") ;
        }
    }
}