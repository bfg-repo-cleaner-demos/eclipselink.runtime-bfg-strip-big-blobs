<!--/*******************************************************************************
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
* which accompanies this distribution.
* The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
* and the Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*     - properties ending in .jar define jarfile names only (no path)
*     - properties ending in .lib are fully qualified jars (path and filename)
*     - properties ending in .dir are directory paths
*     - properties ending in .path are path refid names (classpath fragments)
*   - multi-word targets use hyphens '-'
*     - targets beginning with test- are reserved for high level test targets,
*       and are used in test results parsing
*     - targets typically use the form <action>-<object>-<type> (ie. package-bundle-zip)
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatinated
*     e.g. 'runpathref'
*   - multi-word tasks (taskdef) names are concatinated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
*
* Contributors:
*     tware - initial API and implementation
*     egwin - update to adopt calling standards
#******************************************************************************/-->
<!-- This ant project includes the following tasks:
        - build (default) : cleans, compiles, and packages all tests
        - clean           : cleans up all generated files and dirs
        - compile         : compiles all classes
        - package         : packages the nosql extensions OSGi bundle jar.
-->
<project name="org.eclipse.persistence.nosql" default="build" basedir=".">
    <available file="../${ant.project.name}" type="dir" property="nosql.is.local"/>
    <!-- Test to make sure that the calling script doesn't inherit the variable -->
    <!-- (should be set locally, and be destroyed upon return)                  -->
    <fail message="Not running from '${ant.project.name}' directory" unless="nosql.is.local"/>

    <dirname  property="nosql.build.location_temp" file="${ant.file.org.eclipse.persistence.nosql}"/>
    <pathconvert targetos="unix" property="nosql.build.location">
        <path>
            <pathelement location="${nosql.build.location_temp}"/>
        </path>
    </pathconvert>
    <echo message="Build location = '${nosql.build.location}'"/>
    <condition property="nosql.2.base.dir" value="../.." else="..">
        <contains string="${nosql.build.location}" substring="foundation"/>
    </condition>
    <echo message="nosql.2.base.dir = '${nosql.2.base.dir}'"/>
    <property name="nosql.2.common.plugins.dir"     value="${nosql.2.base.dir}/plugins"/>
    <property name="nosql.2.foundation.plugins.dir" value="../plugins"/>
    <condition property="nosql.2.jpa.plugins.dir"   value="${nosql.2.base.dir}/jpa/plugins" else="../plugins">
        <available file="${nosql.2.base.dir}/jpa/plugins" type="dir"/>
    </condition>
    <property name="nosql.2.buildsys.dir"           value="${nosql.2.base.dir}/buildsystem"/>

    <!-- local property overrides -->
    <condition property="custom.properties.message" value="Loading ${user.home}/build.properties..."
                                                     else="Custom properties file '${user.home}/build.properties' not found to load.">
        <available file="${user.home}/build.properties"/>
    </condition>
    <echo message="${custom.properties.message}"/>
    <property file="${user.home}/build.properties"/>
    <property file="${nosql.build.location}/antbuild.properties"/>

    <!-- Defaults, set var in ${user.home}/build.properties if different version required -->
    <property name="bndtool.prefix" value="bnd"/>
    <property name="bndtool.separator" value="-"/>
    <property name="bndtool.criteria" value="[0.0.350,0.1.0)"/>

    <!-- Primary Targets -->
    <target name="build" depends="clean, compile, jar" description="build ${ant.project.name} component"/>
    <target name="jar"   depends="bnd-package, package" description="package ${ant.project.name} component"/>

    <!-- clean -->
    <target name="clean" description="Clean all generated content">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${classes.dir}"/>
            <fileset dir="${nosql.2.common.plugins.dir}" includes="${ant.project.name}_*.jar*, ${ant.project.name}.source_*.jar*"/>
        </delete>
    </target>

    <!-- initialize varables and paths needed for compile -->
    <!-- the number of properties needed now is too great for lazy loading without a target -->
    <target name="init">
        <property name="custom.tasks.lib" value="${nosql.2.buildsys.dir}/ant_customizations.jar"/>
        <property name="custom.echo.task.class" value="org.eclipse.persistence.buildtools.ant.taskdefs.Say"/>
        <property name="custom.selectbundle.task.class" value="org.eclipse.persistence.buildtools.ant.taskdefs.SelectBundle"/>
        <taskdef name="say"          classname="${custom.echo.task.class}"         classpath="${custom.tasks.lib}"/>
        <taskdef name="selectbundle" classname="${custom.selectbundle.task.class}" classpath="${custom.tasks.lib}"/>
        <!-- This HAS to be defined after allowing user redefinitions (which will cause the condition not to set anything) -->
        <!-- This tests to make sure the extensions dir exists, if not sets to a existant dummy location -->
        <condition property="extensions.depend.dir" value="${nosql.2.base.dir}/../extension.lib.external"
                                                     else="${nosql.build.location}">
            <available file="${nosql.2.base.dir}/../extension.lib.external" type="dir"/>
        </condition>
        <echo message="extensions.depend.dir = '${extensions.depend.dir}'"/>
        <!-- versioning -->
        <!-- These variables  are set in autobuild.xml. A manual build gets defaults -->
        <tstamp>
           <format property="build.date" pattern="yyyyMMdd"/>
           <format property="build.time" pattern="HHmm"/>
        </tstamp>
        <property name="build.type"             value="SNAPSHOT"/>
        <property name="svn.revision"           value="NA"/>
        <property name="version.qualifier"      value="qualifier"/>
        <property name="version.string"         value="${release.version}.${version.qualifier}"/>
        <property name="release.designation"    value="EclipseLink ${release.version} Build"/>
        <property name="specification.vendor"   value="Eclipse.org - EclipseLink Project"/>
        <property name="implementation.vendor"  value="${specification.vendor}"/>
        <say  message="'nobnd' is set."         if="nobnd"/>

        <!-- Check for BND library -->
        <property name="nobndtool.manifest.dir" value="${nosql.build.location}/META-INF"/>
        <!-- extensions.depend.dir must be tested first to allow user overrides to work properly,  **
         **  once bnd is added to the buildsystem directory.                                       -->
        <echo message="bndtool.prefix        = '${bndtool.prefix}'"/>
        <echo message="bndtool.separator     = '${bndtool.separator}'"/>
        <echo message="bndtool.criteria      = '${bndtool.criteria}'"/>
        <selectbundle basename="${bndtool.prefix}" directory="${extensions.depend.dir}" separator="${bndtool.separator}"
                     criterion="${bndtool.criteria}" property="bndtool.lib" includepath="true"
        />
        <echo message="nosql.2.buildsys.dir  = '${nosql.2.buildsys.dir}'"/>
        <selectbundle basename="${bndtool.prefix}" directory="${nosql.2.buildsys.dir}" separator="${bndtool.separator}"
                     criterion="${bndtool.criteria}" property="bndtool.lib" includepath="true"
        />
        <say  message="bndtool.lib           = '${bndtool.lib}'" if="bndtool.lib"/>
        <say  message="Bnd bundle not found in '${extensions.depend.dir}' or '${core.2.buildsys.dir}'!" unless="bndtool.lib"/>
        <say  message="'nobnd' is set."        if="nobnd"/>

        <condition property="bld">
            <or>
                <isset property="bndtool.lib"/>
                <isset property="nobnd"/>
            </or>
        </condition>
        <say  message="'bld' is set."          if="bld"/>
    </target>

    <!-- initialize varables and paths needed for compile -->
    <!-- the number of properties needed now is too great for lazy loading without a target -->
    <target name="init-compile" depends="init">
        <!-- dependency properties -->
        <!-- Core has no jpa 2.0 specific compile dependency: use below instead to test assertion -->
        <!-- property name="persistence.lib"    value="${nosql.2.common.plugins.dir}/${persistence10.jar}"/ -->
        <property name="persistence.lib"  value="${nosql.2.jpa.plugins.dir}/${persistence20.jar}"/>
        <property name="core.lib"         value="${nosql.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar"/>
        <!-- Common "Core" dependency definitions from "eclipselink.core.depend" -->
        <property name="resource.lib"     value="${nosql.2.common.plugins.dir}/${resource.jar}"/>
        <!-- "nosql" dependency definitions from "nosql.extensions.depend.jars" -->
        <condition property="mongo.lib"   value="${nosql.2.common.plugins.dir}/${mongo.jar}">
            <available file="${nosql.2.common.plugins.dir}/${mongo.jar}"/>
        </condition>

        <!-- dependency tests -->
        <available file="${persistence.lib}"   property="persistence.bundle.exist"/>
        <available file="${core.lib}"          property="core.bundle.exist"/>
        <!-- common dependency tests -->
        <available file="${resource.lib}"      property="resource.bundle.exist"/>
        <!-- nosql dependency tests -->
        <available file="${mongo.lib}"         property="mongo.bundle.exist"/>
        <!-- nosql extension dir test -->

        <say  message="persistence.lib:      '${persistence.lib}'"     if="persistence.bundle.exist"/>
        <say  message="core.lib:             '${core.lib}'"            if="core.bundle.exist"/>
        <say  message="resource.lib:         '${resource.lib}'"        if="resource.bundle.exist"/>
        <say  message="mongo.lib:            '${mongo.lib}'"           if="mongo.bundle.exist"/>
        <fail message="Cannot find:          '${persistence.lib}'" unless="persistence.bundle.exist"/>
        <fail message="Cannot find:          '${core.lib}'"        unless="core.bundle.exist"/>
        <fail message="Cannot find:          '${resource.lib}'"    unless="resource.bundle.exist"/>
        <fail message="Cannot find:          '${mongo.lib}'"       unless="mongo.bundle.exist"/>

        <!-- Set Compile Path-->
        <path id="nosql.compile.path">
            <pathelement path="${core.lib}"/>
            <pathelement path="${persistence.lib}"/>
            <pathelement path="${resource.lib}"/>
            <pathelement path="${mongo.lib}"/>
        </path>
    </target>

    <!-- initialize varables and paths needed for packaging - needs to be evaluated post-compile -->
    <target name="init-package" depends="init">
        <!-- Test for recent compile -->
        <available file="${classes.dir}"                  type="dir" property="classes.dir.exist"/>

        <!-- Check bnd settings -->
        <condition property="bnd.bld">
            <and>
                <isset property="bndtool.lib"/>
                <not>  <isset property="nobnd"/> </not>
            </and>
        </condition>

        <!-- Check for nosql compile dependencies -->
        <condition property="package.ok">
            <and>
                <isset property="classes.dir.exist"/>
                <isset property="nobnd"/>
            </and>
        </condition>
        <condition property="bnd-package.ok">
            <and>
                <isset property="classes.dir.exist"/>
                <isset property="bnd.bld"/>
            </and>
        </condition>
        <say message="'nobnd' is set. (Override to use jar tool set)"               if="nobnd"/>
        <say message="'bnd.bld' is set. (BND tool found, and override not set)"     if="bnd.bld"/>
        <say message="'package.ok' is set. (Packaging will use jar tool)"           if="package.ok"/>
        <say message="'bnd-package.ok' is set. (Packaging will use BND tool)"       if="bnd-package.ok"/>
        <say message="No classes found, packaging will be skipped."             unless="classes.dir.exist"/>
    </target>

    <target name="fail-on-no-bnd" unless="bld">
        <echo message="BND tool (${bndtool.prefix}${bndtool.separator}[version].jar) not found in either:"/>
        <echo message="    the extensions.depend.dir: '${extensions.depend.dir}'"/>
        <echo message="    or the buildsystem dir:    '${nosql.2.buildsys.dir}'"/>
        <echo message=""/>
        <echo message="if you have renamed it, you can define a different"/>
        <echo message="jarname by adding 'bndtool.lib=[path]/[jarname] to your'"/>
        <echo message="${user.home}/build.properties file."/>
        <echo message=""/>
        <echo message="You can download BND from http://www.aqute.biz/Code/Download"/>
        <echo message=""/>
        <echo message="or if you really need to build NOW, you can use '-Dnobnd=true'"/>
        <echo message="on the ant command-line. However, the manifests used will be those"/>
        <echo message="checked-in for development, and will likely have errors."/>
        <fail message="Missing BND library!"/>
    </target>

    <!-- compile -->
    <target name="compile" depends="init-compile, fail-on-no-bnd" description="Compile bundle code">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               includes="org/eclipse/persistence/**/*.java"
               debug="${javac.debug}"
               debuglevel="${javac.debuglevel}"
               optimize="${javac.optimize}"
               source="${javac.version}"
               target="${javac.version}"
               deprecation="${javac.deprecation}"
               failonerror="true"
               memoryMaximumSize="512m"
               fork="true"
               classpathref="nosql.compile.path"
        />
    </target>

    <!-- package -->
    <target name="package-src" depends="init-package"  description="jar OSGI src bundle">
        <delete file="${nosql.2.common.plugins.dir}/${ant.project.name}.source_${version.string}.jar*" quiet="true" failonerror="false"/>
        <jar jarfile="${nosql.2.common.plugins.dir}/${ant.project.name}.source_${version.string}.jar" duplicate="preserve">
             <manifest>
                <attribute name="Specification-Vendor"   value="${specification.vendor}"/>
                <attribute name="Specification-Version"  value="${release.version}"/>
                <attribute name="Implementation-Vendor"  value="${implementation.vendor}"/>
                <attribute name="Implementation-Version" value="${version.string}"/>
                <attribute name="Bundle-ManifestVersion" value="2"/>
                <attribute name="Bundle-Name"            value="EclipseLink nosql Extensions Source"/>
                <attribute name="Bundle-SymbolicName"    value="${ant.project.name}.source"/>
                <attribute name="Bundle-Vendor"          value="${implementation.vendor}"/>
                <attribute name="Bundle-Version"         value="${version.string}"/>
                <attribute name="Eclipse-SourceBundle"   value="${ant.project.name};version=&quot;${version.string}&quot;"/>
            </manifest>
            <fileset dir="${nosql.2.base.dir}">
                <include name="about.html"/>
                <include name="readme.html"/>
                <include name="license.*"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="org/eclipse/persistence/**/*.java"/>
            </fileset>
        </jar>
    </target>

    <target name="package" if="package.ok" depends="package-src" description="jar OSGI bundle">
        <delete file="${nosql.2.common.plugins.dir}/${ant.project.name}_${version.string}.jar*"        quiet="true" failonerror="false"/>
        <jar jarfile="${nosql.2.common.plugins.dir}/${ant.project.name}_${version.string}.jar" manifest="${nobndtool.manifest.dir}/MANIFEST.MF" duplicate="preserve">
            <fileset dir="${nosql.2.base.dir}">
                <include name="about.html"/>
                <include name="readme.html"/>
                <include name="license.*"/>
            </fileset>
            <fileset dir="${classes.dir}">
                <include name="org/eclipse/persistence/**/*.class"/>
            </fileset>
        </jar>
    </target>

    <target name="bnd-package" if="bnd-package.ok" depends="package-src">
        <delete file="${nosql.2.common.plugins.dir}/${ant.project.name}_${version.string}.jar*"        quiet="true" failonerror="false"/>
        <taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${bndtool.lib}"/>
        <bnd
            classpath="${classes.dir}"
            eclipse="false"
            sourcepath="${src.dir}"
            failok="false"
            exceptions="true"
            files="./org.eclipse.persistence.nosql.bnd"
            output="${nosql.2.common.plugins.dir}/${ant.project.name}_${version.string}.jar"/>
    </target>
</project>
