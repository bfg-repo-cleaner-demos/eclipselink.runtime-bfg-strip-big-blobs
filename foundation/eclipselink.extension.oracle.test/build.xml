<!--/*******************************************************************************
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
* which accompanies this distribution.
* The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
* and the Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*   - multi-word targets use hyphens '-'
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatinated
*     e.g. 'runpathref'
*   - multi-word tasks (taskdef) names are concatinated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
*
* Contributors:
*     tware - initial API and implementation
#******************************************************************************/-->
<!-- This ant project includes the following tasks:
        - all (default) : compiles all tests
        - compile : compiles all tests
        - package.structconverter : packages JPA structure converter model jar
        - package.structconverter.tests : packages JPA structure converter test jar
        - test-oracle: Runs Core Oracle-specific tests

        The build file currently only compiles the tests, but does not define targets for running them as they are run through core and jpa.
        It requires some configuration of the build.properties.
    -->
<project name="Eclipse Persistence Services" default="all" basedir=".">
    <!-- Allows a user to overide certain user specific properties. -->
    <property file="${user.home}/build.properties"/>
    <property file="${user.home}/test.properties"/>
    <property name="eclipselink.extension.oracle.test" value="."/>
    <property file="${eclipselink.extension.oracle.test}/build.properties"/>
    <property file="${eclipselink.extension.oracle.test}/${test.properties}"/>
    <property file="${eclipselink.extension.oracle.test}/test.properties"/>

    <!-- This checks<P> if the trunk was checked out, or just the Eclipse projects. -->
    <available file="${eclipselink.extension.oracle.test}/${eclipselink.jpa.trunk}" type="dir" property="is.trunk"/>

    <!-- Configures paths for trunk checkout. -->
    <target name="config-trunk" if="is.trunk">
        <property name="eclipselink.jpa.dir" value="${eclipselink.extension.oracle.test}/${eclipselink.jpa.trunk}"/>
        <property name="eclipselink.jpa.test.dir" value="${eclipselink.extension.oracle.test}/${eclipselink.jpa.test.trunk}"/>
        <antcall target="config-compile-path" inheritRefs="true"/>
    </target>

    <!-- Configures paths for Eclipse project checkout. -->
    <target name="config-flat" unless="is.trunk">
        <property name="eclipselink.jpa.dir" value="${eclipselink.extension.oracle.test}/${eclipselink.jpa}"/>
        <property name="eclipselink.jpa.test.dir" value="${eclipselink.extension.oracle.test}/${eclipselink.jpa.test}"/>
        <antcall target="config-compile-path" inheritRefs="true"/>
    </target>

    <!-- Classpath used for compiling tests. -->
    <target name="config-compile-path">
        <path id="compile.path">
            <fileset
                dir="${eclipselink.plugins}"
                includes="${eclipselink.core.depend}"/>
            <pathelement path="${eclipselink.core}/${classes.dir}"/>
            <pathelement path="${eclipselink.core.test}/${classes.dir}"/>
            <pathelement path="${eclipselink.jpa.dir}/${classes.dir}"/>
            <pathelement path="${eclipselink.jpa.test.dir}/${classes.dir}"/>
            <pathelement path="${eclipselink.extension.oracle}/${classes.dir}"/>
            <pathelement path="${eclipselink.jar.name}"/>
            <fileset
                dir="${oracle.extensions.depend.dir}"
                includes="${oracle.extensions.depend.jars}"/>
            <pathelement path="${junit.lib}"/>
        </path>
    </target>

    <!-- Default ant target, compiles and jars tests, packages jpa structconverter jar, does not run tests. -->
    <target name="all" depends="clean, compile, package-structconverter, package-structconverter-tests, build-jar" description="compiles tests, packages jpa structconverter jar"/>

    <!-- Compiles all tests. -->
    <target name="compile" depends="config-trunk, config-flat" description="compile oracle tests">
        <mkdir dir="${eclipselink.extension.oracle.test}/${classes.dir}"/>
        <javac srcdir="${eclipselink.extension.oracle.test}/${src.dir}"
               destdir="${eclipselink.extension.oracle.test}/${classes.dir}"
               includes="org/eclipse/persistence/**, java/sql/**"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               source="${javac.version}"
               target="${javac.version}"
               deprecation="${javac.deprecation}"
               failonerror="true"
               memoryMaximumSize="512m"
               fork="true">
            <classpath>
                <path refid="compile.path"/>
            </classpath>
        </javac>
    </target>

    <!-- Package the structconverter JPA model jar. -->
    <target name="package-structconverter">
        <copy todir="${eclipselink.extension.oracle.test}/${build.dir}/${struct.converter.classes.dir}/META-INF">
            <fileset dir="${eclipselink.extension.oracle.test}/resource/structconverter" includes="*.xml"/>
        </copy>
        <copy todir="${eclipselink.extension.oracle.test}/${build.dir}/${struct.converter.classes.dir}">
            <fileset dir="${eclipselink.extension.oracle.test}/${classes.dir}"
                     includes="org/eclipse/persistence/testing/models/jpa/structconverter/**"/>
        </copy>
        <jar jarfile="${eclipselink.extension.oracle.test}/eclipselink-struct-converter-model.jar">
            <fileset dir="${eclipselink.extension.oracle.test}/${build.dir}/${struct.converter.classes.dir}">
            </fileset>
        </jar>
    </target>

    <!-- Package the structconverter JPA tests jar. -->
    <target name="package-structconverter-tests">
        <jar jarfile="${eclipselink.extension.oracle.test}/eclipselink-struct-converter-model-tests.jar">
            <fileset dir="${eclipselink.extension.oracle.test}/${classes.dir}"
                     includes="org/eclipse/persistence/testing/tests/spatial/jgeometry/**/*.class,
                               org/eclipse/persistence/testing/tests/jpa/structconverter/**/*.class"/>
        </jar>
    </target>

    <!-- Build tests jar. -->
    <target name="build-jar" depends="compile" description="build a jar file other projects can use for dependancies if they cannot compile with oracle dependancies">
      <jar jarfile="${eclipselink.extension.oracle.test}/${eclipselink.oracle.depend.test.jar}">
          <fileset dir="${eclipselink.extension.oracle.test}/${classes.dir}">
            <include name="org/eclipse/persistence/**/*.class"/>
          </fileset>
      </jar>
    </target>

    <!-- Clean all build generated content. -->
    <target name="clean" description="Clean the build">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${eclipselink.extension.oracle.test}/${classes.dir}"/>
            <fileset dir="${eclipselink.extension.oracle.test}/${struct.converter.classes.dir}"/>
            <fileset dir="${eclipselink.extension.oracle.test}/${build.dir}"/>
            <fileset dir="${eclipselink.extension.oracle.test}" includes="${eclipselink.oracle.depend.test.jar}"/>
            <fileset dir="${eclipselink.extension.oracle.test}" includes="eclipselink-struct-converter-model-tests.jar"/>
            <fileset dir="${eclipselink.extension.oracle.test}" includes="eclipselink-struct-converter-model.jar"/>
        </delete>
    </target>

    <!-- Classpath used for running tests. -->
    <path id="run.classpath">
        <pathelement path="${eclipselink.extension.oracle.test}/${run.dir}"/>
        <pathelement path="${eclipselink.extension.oracle.test}/${eclipselink.oracle.depend.test.jar}"/>
        <pathelement path="${jdbc.driver.jar}"/>
        <path refid="compile.path"/>
    </path>

    <!-- Default test target, runs test.class from test.properties (default is OracleTestModel). -->
    <target name="test">
        <antcall target="run.test" inheritRefs="true">
            <param name="TEST_CLASS" value="${test.class}"/>
            <param name="DB_URL" value="${db.url}"/>
        </antcall>
        <antcall target="generate.report" inheritRefs="true"/>
    </target>

    <!-- Runs Core Oracle-specific tests. -->
    <target name="test-oracle">
        <echo message="Creating MY_GEOMETRY datatype for spatial tests: ${db.url}..."/>
        <sql driver="${db.driver}"
            url="${db.url}"
            userid="${db.user}"
            password="${db.pwd}"
            onerror="continue"
            >
            <classpath>
                <pathelement location="${jdbc.driver.jar}"/>
            </classpath>
CREATE OR REPLACE TYPE MY_GEOMETRY AS OBJECT (id NUMBER, geom MDSYS.SDO_GEOMETRY);
        </sql>
        <antcall target="run-test" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.OracleTestModel"/>
            <param name="DB_URL" value="${db.url}"/>
        </antcall>
        <antcall target="run-test" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.xdb.XDBTestModel"/>
            <param name="DB_URL" value="${db.oci.url}"/>
        </antcall>
        <antcall target="run-test" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.xdb.XDBTestModelMWIntegration"/>
            <param name="DB_URL" value="${db.oci.url}"/>
        </antcall>
        <antcall target="run-test" inheritRefs="true">
            <param name="TEST_CLASS" value="org.eclipse.persistence.testing.tests.unwrappedconnection.UnwrapConnectionXDBTestModel"/>
            <param name="DB_URL" value="${db.oci.url}"/>
        </antcall>
        <antcall target="generate-report" inheritRefs="true"/>
    </target>

    <!-- Prompt runner test target, runs test.class from test.properties (default is OracleTestModel). -->
    <target name="test-prompt">
        <antcall target="run-test-prompt" inheritRefs="true">
            <param name="TEST_CLASS" value="${test.class}"/>
            <param name="DB_URL" value="${db.url}"/>
        </antcall>
    </target>

    <!-- Launches the testing browser -->
    <target name="test-browser" depends="config-trunk, config-flat">
        <echo>Running test browser</echo>
        <mkdir dir="${eclipselink.extension.oracle.test}/${run.dir}"/>
        <mkdir dir="${eclipselink.extension.oracle.test}/${report.dir}"/>
        <copy file="${eclipselink.core.test}/${resource.dir}/java.policy.allpermissions" todir="${eclipselink.extension.oracle.test}/${run.dir}" overwrite="true"/>
        <java classname="org.eclipse.persistence.testing.framework.ui.TestingBrowserFrame"
             fork="true"
             maxmemory="512m"
             failonerror="false"
             dir="${eclipselink.extension.oracle.test}/${run.dir}">
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Ddb.driver=${db.driver}"/>
            <jvmarg value="-Ddb.url=${db.url}"/>
            <jvmarg value="-Ddb.user=${db.user}"/>
            <jvmarg value="-Ddb.pwd=${db.pwd}"/>
            <jvmarg value="-Ddb.platform=${db.platform}"/>
            <jvmarg value="-Djava.security.manager"/>
            <jvmarg value="-Djava.security.policy=./java.policy.allpermissions"/>
            <classpath>
                <path refid="run.classpath"/>
            </classpath>
        </java>
    </target>

    <!-- Generic target for running tests. -->
    <target name="run-test" depends="config-trunk, config-flat">
        <echo>Running test on ${DB_URL}</echo>
        <mkdir dir="${eclipselink.extension.oracle.test}/${run.dir}"/>
        <mkdir dir="${eclipselink.extension.oracle.test}/${report.dir}"/>
        <junit printsummary="yes" failureproperty="junit.failed" fork="yes" showoutput="true" maxmemory="512m" dir="${eclipselink.core.test}/${run.dir}">
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Ddb.driver=${db.driver}"/>
            <jvmarg value="-Ddb.url=${DB_URL}"/>
            <jvmarg value="-Ddb.user=${db.user}"/>
            <jvmarg value="-Ddb.pwd=${db.pwd}"/>
            <jvmarg value="-Ddb.platform=${db.platform}"/>
            <jvmarg value="-Djava.security.manager"/>
            <jvmarg value="-Djava.security.policy=./java.policy.allpermissions"/>
            <classpath>
                <path refid="run.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <test name="${TEST_CLASS}" haltonfailure="no" outfile="${eclipselink.extension.oracle.test}/${report.dir}/${TEST_CLASS}-test-results">
            </test>
        </junit>
    </target>

    <target name="generate-report">
        <junitreport todir="${eclipselink.extension.oracle.test}/${report.dir}">
            <fileset dir="${eclipselink.extension.oracle.test}/${report.dir}">
                <include name="*test-results.xml"/>
            </fileset>
            <report format="noframes" todir="${eclipselink.extension.oracle.test}/${report.dir}"/>
        </junitreport>
    </target>

    <!-- Runs the test using the PromptTestRunner -->
    <target name="run-test-prompt" depends="config-trunk, config-flat">
        <echo>Running test on ${DB_URL}</echo>
        <mkdir dir="${eclipselink.extension.oracle.test}/${run.dir}"/>
        <mkdir dir="${eclipselink.extension.oracle.test}/${report.dir}"/>
        <java classname="org.eclipse.persistence.testing.framework.PromptTestRunner"
             fork="true"
             maxmemory="512m"
             failonerror="false"
             dir="${eclipselink.extension.oracle.test}/${run.dir}">
            <jvmarg value="-Declipselink.logging.level=${logging.level}"/>
            <jvmarg value="-Ddb.driver=${db.driver}"/>
            <jvmarg value="-Ddb.url=${DB_URL}"/>
            <jvmarg value="-Ddb.user=${db.user}"/>
            <jvmarg value="-Ddb.pwd=${db.pwd}"/>
            <jvmarg value="-Ddb.platform=${db.platform}"/>
            <jvmarg value="${test.security-manager}"/>
            <jvmarg value="${test.security-manager.policy}"/>
            <arg value="pfile=../test.properties" />
            <arg value="testmodel=${TEST_CLASS}" />
            <arg value="regressionlog=../${report.dir}/${TEST_CLASS}-test.log" />
            <arg value="saveresults=true" />
            <classpath>
                <path refid="run.classpath"/>
            </classpath>
        </java>
    </target>
</project>