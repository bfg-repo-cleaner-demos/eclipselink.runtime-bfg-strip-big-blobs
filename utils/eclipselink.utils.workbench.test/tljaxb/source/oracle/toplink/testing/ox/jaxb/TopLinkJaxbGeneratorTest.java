/*******************************************************************************
* Copyright (c) 2007 Oracle. All rights reserved.
* This program and the accompanying materials are made available under the terms of
* the Eclipse Public License v1.0, which accompanies this distribution and is available at
* http://www.eclipse.org/legal/epl-v10.html.
*
* Contributors:
*     Oracle - initial API and implementation
******************************************************************************/
package org.eclipse.persistence.testing.ox.jaxb;

/**
 * This TestCase tests the reading and writing of objects, using the TopLink project
 * generated by the TopLink JAXB Compiler.
 *
 * @author	Rick Barkhouse <rick.barkhouse@oracle.com>
 * @since	11/03/2003 11:43:21
 */

import java.io.File;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;

import java.math.BigInteger;

import oracle.xml.parser.v2.DOMParser;
import oracle.xml.parser.v2.XMLDocument;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.PropertyException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.UnmarshalException;

import org.eclipse.persistence.oxm.XMLMarshaller;
import org.eclipse.persistence.tools.workbench.XMLProjectReader;
import org.eclipse.persistence.sessions.Project;

import oracle.xml.jaxb.tljaxb;

import com.sun.tools.javac.Main;

// Generated Classes
import org.eclipse.persistence.testing.tljaxb.*;

// From OXTestCase
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import org.custommonkey.xmlunit.ComparisonController;
import org.custommonkey.xmlunit.Diff;
import org.custommonkey.xmlunit.Difference;
import org.custommonkey.xmlunit.DifferenceEngine;
import org.custommonkey.xmlunit.DifferenceListener;
import org.custommonkey.xmlunit.XMLTestCase;

public class TopLinkJaxbGeneratorTest extends XMLTestCase {

	// ===========================================================================

	private JAXBContext jaxbContext;
	private Marshaller marshaller;
	private Unmarshaller unmarshaller;
	private DOMParser parser;

	private XMLMarshaller xmlMarshaller;

	private final static String CONTEXT_PATH = "org.eclipse.persistence.testing.tljaxb";
	private final static String CONTROL_XML_FILE_NAME = "team-1employee.xml";

	public TopLinkJaxbGeneratorTest(String name) {
		super(name);

	}

	public static void main(String[] args) {
		junit.swingui.TestRunner.main(new String[] {"-c", "org.eclipse.persistence.testing.ox.jaxb.TopLinkJaxbGeneratorTest"});
	}

	public void setUp() throws Exception {
		XMLProjectReader reader = new XMLProjectReader();
		reader.setShouldUseSchemaValidation(false);

		Project project = reader.read("team.xml");

		xmlMarshaller = new XMLMarshaller(project);

		parser = new DOMParser();
		parser.setPreserveWhitespace(false);
/*
		try {
			jaxbContext = JAXBContext.newInstance(CONTEXT_PATH);
			marshaller = jaxbContext.createMarshaller();
			unmarshaller = jaxbContext.createUnmarshaller();
		} catch (javax.xml.bind.JAXBException e) {
			e.printStackTrace();
		}
*/
	}

	public void testCompile() throws Exception {
		String dir = System.getProperty("user.dir");

		deleteDirectory(new File(dir + "/resource/toplink"));
		deleteDirectory(new File(dir + "/resource/oracle"));

		// Run the JAXB Compiler, generating the .java files
		String[] args = {
			"-schema",  dir + "/resource/team.xsd", "-outputDir", dir + "/resource", "-targetPkg", "org.eclipse.persistence.testing.tljaxb"
		};
		tljaxb.main(args);

		File directory = new File(dir + "/resource/oracle/toplink/testing/tljaxb");
		File[] files = directory.listFiles();

		int status = 0;
		for (int i = 0; i < files.length; i++) {
			if (files[i].getName().endsWith(".java")) {
				// Compile the generated .java files
				Main javac = new Main();
				String[] javacArgs = new String[] {
					"-d", dir + "/resource", dir + "/resource/oracle/toplink/testing/tljaxb/" + files[i].getName()
				};
				status += javac.compile(javacArgs);
			}
		}
		// If no errors status will be zero
		assertTrue(status == 0);
	}

	public void testXUnmarshal() throws Exception {
		File file = new File(ClassLoader.getSystemResource(CONTROL_XML_FILE_NAME).getFile());

		TeamType testObject = (TeamType) xmlMarshaller.unmarshal(file);

		int returnCode = equalsControlObject(testObject);
		assertTrue("Unmarshalled object not equal to control object, error code: " + returnCode, returnCode == 0);
	}

	public void testXMarshal() throws Exception {
		StringWriter writer = new StringWriter();
		xmlMarshaller.marshal(getControlObject(), writer);

		StringReader reader = new StringReader(writer.toString());
		parser.parse(reader);

		assertXMLIdentical(getControlDocument(), parser.getDocument()); 
	}
/*
	public void testUnmarshal() throws Exception {
		File file = new File(ClassLoader.getSystemResource(CONTROL_XML_FILE_NAME).getFile());

		TeamType testObject = (TeamType) unmarshaller.unmarshal(file);

		int returnCode = equalsControlObject(testObject);
		assertTrue("Unmarshalled object not equal to control object, error code: " + returnCode, returnCode == 0);
	}

	public void testMarshal() throws Exception {
		StringWriter writer = new StringWriter();
		marshaller.marshal(getControlObject(), writer);

		StringReader reader = new StringReader(writer.toString());
		parser.parse(reader);

		assertXMLIdentical(getControlDocument(), parser.getDocument()); 
	}
*/

	// ===========================================================================

	private int equalsControlObject(TeamType team) {
		if (team == null) return 1;
		if (team.getEmployee().size() != 1) return 2;

		EmployeeTypeImpl emp = (EmployeeTypeImpl) team.getEmployee().get(0);
		if (emp == null) return 3;
		if (!emp.getFirstName().equals("Jane")) return 4;
		if (!emp.getLastName().equals("Doe")) return 5;
		if (!emp.getGender().equals("F")) return 6;

		AddressTypeImpl add = (AddressTypeImpl) emp.getAddress();
		if (add == null) return 7;

		// Can't test Inheritance yet
		/*
		System.out.println(add.getClass());

		if (!(add instanceof CaAddressType)) return 8;
		CaAddressTypeImpl cadd = (CaAddressTypeImpl) add;
		if (!cadd.getStreet().equals("50 O'Connor Street")) return 9;
		if (!cadd.getCity().equals("Ottawa")) return 10;
		if (!cadd.getProvince().equals("Ontario")) return 11;
		if (!cadd.getPostalCode().equals("K1S 5P3")) return 12;
		*/

		if (emp.getTask() == null) return 13;
		if (emp.getTask().size() != 3) return 14;
		if (!emp.getTask().get(0).equals("Design Feature A")) return 15;
		if (!emp.getTask().get(1).equals("Implement Feature B")) return 16;
		if (!emp.getTask().get(2).equals("Write Document C")) return 17;

		if (emp.getPhoneNumber() == null) return 18;
		if (emp.getPhoneNumber().size() != 3) return 19;
		EmployeeTypeImpl.PhoneNumberTypeImpl phone1 = (EmployeeTypeImpl.PhoneNumberTypeImpl) emp.getPhoneNumber().get(0);
		if (!phone1.getType().equals("Work")) return 20;
		if (!phone1.getAreaCode().equals(new BigInteger("613"))) return 21;
		if (!phone1.getExchange().equals(new BigInteger("555"))) return 22;
		if (!phone1.getNumber().equals(new BigInteger("1111"))) return 23;
		EmployeeTypeImpl.PhoneNumberTypeImpl phone2 = (EmployeeTypeImpl.PhoneNumberTypeImpl) emp.getPhoneNumber().get(1);
		if (!phone2.getType().equals("Home")) return 24;
		if (!phone2.getAreaCode().equals(new BigInteger("613"))) return 25;
		if (!phone2.getExchange().equals(new BigInteger("555"))) return 26;
		if (!phone2.getNumber().equals(new BigInteger("2222"))) return 27;
		EmployeeTypeImpl.PhoneNumberTypeImpl phone3 = (EmployeeTypeImpl.PhoneNumberTypeImpl) emp.getPhoneNumber().get(2);
		if (!phone3.getType().equals("Cell")) return 28;
		if (!phone3.getAreaCode().equals(new BigInteger("613"))) return 29;
		if (!phone3.getExchange().equals(new BigInteger("555"))) return 30;
		if (!phone3.getNumber().equals(new BigInteger("3333"))) return 31;

		return 0;
	}

	// ===========================================================================

	private TeamType getControlObject() {
		EmployeeTypeImpl employee = new EmployeeTypeImpl();
		employee.setFirstName("Jane");
		employee.setFirstName("Doe");
		employee.setGender("F");
		employee.getTask().add("Design Feature A");
		employee.getTask().add("Implement Feature B");
		employee.getTask().add("Write Document C");

		CaAddressTypeImpl address = new CaAddressTypeImpl();
		address.setStreet("50 O'Connor Street");
		address.setCity("Ottawa");
		address.setProvince("Ontario");
		address.setPostalCode("K1S 5P3");
		employee.setAddress(address);

		EmployeeTypeImpl.PhoneNumberTypeImpl phone1 = new EmployeeTypeImpl.PhoneNumberTypeImpl();
		phone1.setType("Work");
		phone1.setAreaCode(new BigInteger("613"));
		phone1.setExchange(new BigInteger("555"));
		phone1.setNumber(new BigInteger("1111"));
		employee.getPhoneNumber().add(phone1);

		EmployeeTypeImpl.PhoneNumberTypeImpl phone2 = new EmployeeTypeImpl.PhoneNumberTypeImpl();
		phone2.setType("Home");
		phone2.setAreaCode(new BigInteger("613"));
		phone2.setExchange(new BigInteger("555"));
		phone2.setNumber(new BigInteger("2222"));
		employee.getPhoneNumber().add(phone2);

		EmployeeTypeImpl.PhoneNumberTypeImpl phone3 = new EmployeeTypeImpl.PhoneNumberTypeImpl();
		phone3.setType("Cell");
		phone3.setAreaCode(new BigInteger("613"));
		phone3.setExchange(new BigInteger("555"));
		phone3.setNumber(new BigInteger("3333"));
		employee.getPhoneNumber().add(phone3);

		TeamImpl team = new TeamImpl();
		team.getEmployee().add(employee);

		return team;
	}

	private XMLDocument getControlDocument() throws Exception {
		InputStream inputStream = ClassLoader.getSystemResourceAsStream(CONTROL_XML_FILE_NAME);
		parser.parse(inputStream);
		return parser.getDocument();
	}

	private boolean deleteDirectory(File directory) {
		boolean successful = true;
		if (directory.isDirectory()) {
			File[] files = directory.listFiles();
			int length = files.length;
			for (int i = 0; i < length && successful; i++) {
				if (!files[i].isDirectory()) {
					successful = files[i].delete();
				} else {
					if (!files[i].getName().equals(".ade_path")) {
						successful = deleteDirectory(files[i]);
					}
				}
			}
			if (successful) {
				directory.delete();
			}
		}
		return successful;
	}

	// ===========================================================================
	// Copied from OXTestCase

	public void assertXMLIdentical(Document control, Document test) {
		ComparisonController comparisonController = new ComparisonControllerFix();
		DifferenceEngine differenceEngine = new DifferenceEngineFix(comparisonController);
		Diff diff = new Diff(control, test, differenceEngine);
		if (!diff.identical()) {
			fail(diff.toString());
		}    
	}

	private class DifferenceEngineFix extends DifferenceEngine {
		public DifferenceEngineFix(ComparisonController comparisonController) {
			super(comparisonController);
		}
	
		protected boolean compareNodeBasics(Node control, Node test, DifferenceListener listener) throws DifferenceEngine.DifferenceFoundException {
			try {
				return super.compareNodeBasics(control, test, listener);
			} catch(NullPointerException e) {
				return true;
			}
		}
	}

	private class ComparisonControllerFix implements ComparisonController {
		public boolean haltComparison(Difference afterDifference) {
			return !afterDifference.isRecoverable();
		}
	}

}