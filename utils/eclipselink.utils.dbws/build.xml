<?xml version="1.0"?>
<!--/*******************************************************************************
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0
* which accompanies this distribution.
* The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
* and the Eclipse Distribution License is available at
* http://www.eclipse.org/org/documents/edl-v10.php.
*
*   Ant naming conventions:
*   - regardless of the actual OS platform,'/' is the directory separator
*     (Ant will convert as appropriate).
*   - multi-word properties use periods '.'
*     - properties ending in .jar define jarfile names only (no path)
*     - properties ending in .lib are fully qualified jars (path and filename)
*     - properties ending in .dir are directory paths
*     - properties ending in .path are path refid names (classpath fragments)
*   - multi-word targets use hyphens '-'
*     - targets beginning with test- are reserved for high level test targets,
*       and are used in test results parsing
*     - targets typically use the form <action>-<object>-<type> (ie. package-bundle-zip)
*   - multi-word macros use underscores '_'
*   - multi-word macro attributes are concatinated
*     e.g. 'runpathref'
*   - multi-word tasks (taskdef) names are concatinated
*     e.g. 'validateconnection'
*   - OS environment variables are in ALLCAPS and have 'env' as a prefix
*     e.g. ${env.XXX}.
*   - Ant properties are lower case.
*
* Contributors:
*     egwin - initial API and implementation
*     egwin - update to adopt calling standards
#******************************************************************************/-->
<project name="eclipselink.utils.dbws" default="build" basedir=".">
    <!-- Test to make certain that build is run from component dir -->
    <available file="../${ant.project.name}" type="dir" property="dbwsutil.is.local"/>
    <fail unless="dbwsutil.is.local" message="Not running from '${ant.project.name}' directory"/>
    <condition property="is.java.version.16">
        <equals arg1="${ant.java.version}" arg2="1.6"/>
    </condition>
    <fail unless="is.java.version.16"
        message="eclipselink.utils.dbws requires Java version 1.6 or higher. You are currently using Java version ${ant.java.version}."
    />

    <dirname  property="dbwsutil.build.location_temp" file="${ant.file.eclipselink.utils.dbws}"/>
    <pathconvert targetos="unix" property="dbwsutil.build.location">
        <path>
            <pathelement location="${dbwsutil.build.location_temp}"/>
        </path>
    </pathconvert>
    <echo message="dbwsutil.build.location = '${dbwsutil.build.location}'"/>
    <condition property="dbwsutil.2.base.dir" value="../.." else="..">
        <contains string="${dbwsutil.build.location}" substring="utils/${ant.project.name}"/>
    </condition>
    <echo message="dbwsutil.2.base.dir = '${dbwsutil.2.base.dir}'"/>
    <property name="dbwsutil.2.common.plugins.dir" value="${dbwsutil.2.base.dir}/plugins"/>

    <!-- OS environment variables have 'env' as a prefix -->
    <property environment="env"/>
    <!-- local property overrides -->
    <property file="${user.home}/build.properties"/>
    <!-- properties checked into SVN -->
    <property file="./build.properties"/>

    <!-- versioning -->
    <!-- These variables  are set in autobuild.xml. A manual build gets defaults -->
    <tstamp>
       <format property="build.date" pattern="yyyyMMdd"/>
       <format property="build.time" pattern="HHmm"/>
    </tstamp>
    <property name="build.type" value="SNAPSHOT"/>
    <property name="svn.revision" value="NA"/>
    <property name="version.string" value="${release.version}.qualifier"/>
    <property name="release.designation"  value="EclipseLink DeveloperBuild"/>

    <!-- Set Compile Path-->
    <path id="dbwsutil.compile.path">
        <pathelement path="${dbwsutil.2.common.plugins.dir}/${asm}"/>
        <pathelement path="${dbwsutil.2.common.plugins.dir}/${servlet.jar}"/>
        <pathelement path="${dbwsutil.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar"/>
        <pathelement path="${dbwsutil.2.common.plugins.dir}/org.eclipse.persistence.dbws_${version.string}.jar"/>
        <pathelement path="../plugins/${wsdl.jar}"/>
    </path>
    <available file="${dbwsutil.2.common.plugins.dir}/org.eclipse.persistence.core_${version.string}.jar" property="core.bundle.exist"/>
    <available file="${dbwsutil.2.common.plugins.dir}/org.eclipse.persistence.dbws_${version.string}.jar" property="dbws.bundle.exist"/>
    <available file="${dbwsutil.2.common.plugins.dir}/${asm}"  type="dir" property="asm.exist"/>
    <available file="../plugins/${wsdl.jar}" property="wsdl.exist"/>

    <!-- all -->
    <target name="build" depends="clean, compile, package" description="build dbwsutils jar"/>

    <!-- clean -->
    <target name="clean" description="Clean all generated content">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${classes.dir}"/>
            <fileset dir="." includes="${dbwsutil.jar}"/>
        </delete>
    </target>

    <!-- compile -->
    <target name="compile" description="Compile DBWS Util classes">
        <fail unless="core.bundle.exist" message="Core bundle cannot be found. Exiting..."/>
        <fail unless="dbws.bundle.exist" message="DBWS bundle cannot be found. Exiting..."/>
        <fail unless="asm.exist"         message="ASM Bundle cannot be found. Exiting..."/>
        <fail unless="wsdl.exist"        message="WSDL Library cannot be found. Exiting..."/>
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}"
               destdir="${classes.dir}"
               includes="**/*.java"
               debug="${javac.debug}"
               debuglevel="${javac.debuglevel}"
               optimize="${javac.optimize}"
               source="1.6"
               target="1.6"
               deprecation="${javac.deprecation}"
               failonerror="true"
               memoryMaximumSize="512m"
               fork="true"
               classpathref="dbwsutil.compile.path"
        />
    </target>

    <!-- package -->
    <target name="package" description="package DBWS util jar">
        <jar jarfile="./${dbwsutil.jar}">
             <manifest>
                <attribute name="Specification-Title"    value="${dbwsutil.util.specification.title}"/>
                <attribute name="Specification-Vendor"   value="${specification.vendor}"/>
                <attribute name="Specification-Version"  value="${release.version}"/>
                <attribute name="Implementation-Title"   value="${dbwsutil.util.implementation.title}"/>
                <attribute name="Implementation-Vendor"  value="${implementation.vendor}"/>
                <attribute name="Implementation-Version" value="${version.string}"/>
                <attribute name="Release-Designation"    value="${release.designation}"/>
            </manifest>
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${resource.dir}">
                <include name="xsd/*.xsd"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="META-INF/services/**/*.*"/>
            </fileset>
        </jar>
    </target>

    <!--  This target is used ONCE at the beginning of a release to update the bundle manifest files.  -->
    <!--  Do not run it, or hook it up to the "build" target -->
    <target name="update-manifest" if="svn.exec" description="update and check-in the manifest">
        <filter token="VERSION" value="${release.version}"/>
        <delete file="META-INF/MANIFEST.MF" failonerror="false"/>
        <copy file="META-INF/MANIFEST.template" tofile="META-INF/MANIFEST.MF" filtering="true"/>
        <exec executable="${svn.exec}" failonerror="false" logError="true">
            <arg value="commit"/>
            <arg value="-m ${version.string}"/>
            <arg value="META-INF/MANIFEST.MF"/>
        </exec>
    </target>

</project>
