<project name="EclipseLink Automated Build" basedir="." default="build.nightly">
<echo message="---- AutoBuild.xml ----"/>

    <target name="build-no-publish"  description="Trigger an automated build without testing or publish"
            depends="clean, build, build-test"
    />
    <target name="build-nightly"    description="Trigger the nightly automated build and lrg tests"
            depends="clean, build, package.bundles, build-test, test-lrg, publish-build, publish-results"
    />
    <target name="build-continuous" description="Trigger an automated build and run the tests if source changes exist"
            depends="clean, build-no-javadoc, build-test, test-srg"
    />

    <target name="init">
        <!-- #  The next properties defines are pulled out of the properties file  -->
        <!-- #       to highlight them.                                            -->
        <!-- # test.properties.run - defines which file to use to connect to the   -->
        <!-- #                       db for post-build testing.                    -->
        <!-- # coretest.prop.file  - the file generated by the build, that holds   -->
        <!-- #                       the db properties for automated testing       -->
        <property name="coretest.prop.file" value="${log.dir}/mysql.jpa.test.properties"/>
        <property name="test.properties.run" value="${coretest.prop.file}"/>

        <property file="${basedir}/autobuild.properties"/>

        <!-- temporary need build_id in upload to maven.  This code should is duplicated from build.xml -->
        <!-- ${build_id} will be given by the build system. Manual build is SNAPSHOT. -->
        <tstamp>
           <format property="build_date" pattern="yyyyMMdd"/>
        </tstamp>
        <condition property="build_number" value="${build_id}">
            <isset property="build_id"/>
        </condition>
        <property name="build_number" value="SNAPSHOT"/>
        <!-- end of temporary code-->

        <condition property="installer_id" value="${build_date}">
            <equals arg1="${build_id}" arg2="SNAPSHOT"/>
        </condition>
        <property name="installer_id" value="${release.version}${build_id}"/>
        <condition property="download.path" value="${eclipse.download.path}/nightly">
            <equals arg1="${build_id}" arg2="SNAPSHOT"/>
        </condition>
        <property name="download.path" value="${eclipse.download.path}"/>
        <!-- HACK: to fix workbench buildnumber stamping until workbench build files can be fixed -->
        <property name="_buildNumber" value="${installer_id}"/>
        <echo message="ANT_ARGS='${env.ANT_ARGS}'"/>
        <echo message="ANT_OPTS='${env.ANT_OPTS}'"/>
        <echo message=" "/>
        <echo message="build_date.build_time='${build_date}.${build_time}'"/>
        <echo message="java.version  ='${java.version}'"/>
        <echo message="os.name       ='${os.name}'"/>
        <echo message="os.arch       ='${os.arch}'"/>
        <echo message="os.version    ='${os.version}'"/>
        <echo message=" "/>
        <echo message="basedir       ='${basedir}'"/>
        <echo message="build.deps.dir='${build.deps.dir}'"/>
        <echo message="build.root.dir='${build.root.dir}'"/>
        <echo message="log.dir       ='${log.dir}'"/>
        <echo message="junit.dir     ='${junit.dir}'"/>
        <echo message="junit.lib     ='${junit.lib}'"/>
    </target>

    <target name="clean" depends="init">
        <!-- Removed because build-clean should take care of old build artifacts,
             and "svn co" should update source (including updating revision numbers,
             and cleaning up renamed and deleted files). -->
        <!-- delete dir="${build.root.dir}"/ -->
        <delete dir="${junit.dir}"/>
        <delete dir="${build.deps.dir}/mail"/>
        <delete dir="${build.deps.dir}/mavenant"/>
        <delete file="${build.deps.dir}/dependencies.txt"/>
        <delete file="${build.deps.dir}/junit.zip"/>
        <ant antfile="build.xml" dir="${build.root.dir}" target="clean"/>
    </target>

    <target name="get-dependencies" depends="clean">
        <mkdir dir="${junit.dir}"/>
        <mkdir dir="${build.deps.dir}/mail"/>
        <mkdir dir="${build.deps.dir}/mavenant"/>

        <get src="${activation.url}" dest="${build.deps.dir}/mail/activation.jar"/>
        <get src="${mail.url}"       dest="${build.deps.dir}/mail/mail.jar"/>
        <get src="${mavenant.url}"   dest="${build.deps.dir}/mavenant/maven-ant-tasks-2.0.8.jar"/>

        <!-- Get junit, extract it, then copy to expected location and cleanup (flatten won't work) -->
        <get src="${junit.url}" dest="${build.deps.dir}/junit.zip"/>
        <unzip src="${build.deps.dir}/junit.zip" dest="${build.deps.dir}"/>
        <copy file="${build.deps.dir}/${junit.bundle}/junit.jar" todir="${junit.dir}"/>
        <delete dir="${build.deps.dir}/${junit.bundle}"/>

        <!-- Generate "dependencies.txt" file -->
        <echo message="Buildsystem external dependencies come from:${line.separator}" file="${build.deps.dir}/dependencies.txt" append="false"/>
        <echo message="junit:      ${junit.url}${line.separator}"      file="${build.deps.dir}/dependencies.txt" append="true"/>
        <echo message="activation: ${activation.url}${line.separator}" file="${build.deps.dir}/dependencies.txt" append="true"/>
        <echo message="mail:       ${mail.url}${line.separator}"       file="${build.deps.dir}/dependencies.txt" append="true"/>
        <echo message="mavenant:   ${mavenant.url}${line.separator}"   file="${build.deps.dir}/dependencies.txt" append="true"/>
    </target>

    <target name="build" depends="get-dependencies">
        <ant antfile="build.xml" dir="${build.root.dir}" target="build.distribution"/>
    </target>

    <target name="build-no-javadoc" depends="get-dependencies">
        <ant antfile="build.xml" dir="${build.root.dir}" target="package.eclipselink.jar"/>
    </target>

    <target name="package.bundles" depends="get-dependencies">
        <ant antfile="build.xml" dir="${build.root.dir}" target="package.eclipselink.bundles"/>
    </target>

    <target name="build-test" depends="get-dependencies">
        <!-- Generate Test properties file -->
        <echo message="# Generated db connection properties (by bootstrap.xml)${line.separator}" file="${coretest.prop.file}" append="false"/>
        <echo message="jdbc.driver.jar=${jdbc.driver.jar}${line.separator}" file="${coretest.prop.file}" append="true"/>
        <echo message="db.driver=${db.driver}${line.separator}"             file="${coretest.prop.file}" append="true"/>
        <echo message="db.url=${db.url}${line.separator}"                   file="${coretest.prop.file}" append="true"/>
        <echo message="db.user=${db.user}${line.separator}"                 file="${coretest.prop.file}" append="true"/>
        <echo message="db.pwd=${db.pwd}${line.separator}"                   file="${coretest.prop.file}" append="true"/>
        <echo message="db.platform=${db.platform}${line.separator}"         file="${coretest.prop.file}" append="true"/>

        <ant antfile="build.xml" dir="${build.root.dir}" target="build.test"/>
        <!-- delete file="${coretest.prop.file}"/ -->
    </target>

    <target name="test-srg">
        <ant antfile="build.xml" dir="${build.root.dir}" target="test.srg">
            <property name="eclipselink.logging.level" value="${test.logging.level}"/>
        </ant>
    </target>

    <target name="test-lrg">
        <ant antfile="build.xml" dir="${build.root.dir}" target="test.lrg">
            <property name="eclipselink.logging.level" value="${test.logging.level}"/>
        </ant>
    </target>

    <target name="publish-build">
        <!-- Futute Note: Could avoid these copies by redefining the html output directly...         -->
        <!--              Would need to ensure that an erroniuos run didn't get partially published. -->
        <copy file="${build.root.dir}/${eclipselink.zip.name}${eclipselink.zip.extension}" tofile="${download.path}/${eclipselink.zip.name}-${installer_id}${eclipselink.zip.extension}"/>
        <copy file="${build.root.dir}/${eclipselink.plugins.zip.name}${eclipselink.zip.extension}" tofile="${download.path}/${eclipselink.plugins.zip.name}-${installer_id}${eclipselink.zip.extension}"/>
        <copy file="${build.root.dir}/foundation/eclipselink.core.test/reports/junit-noframes.html" tofile="${download.path}/test-results/core/eclipselink-srg-${installer_id}.html"/>
        <copy file="${build.root.dir}/jpa/eclipselink.jpa.test/reports/junit-noframes.html" tofile="${download.path}/test-results/jpa/eclipselink-jpa-lrg-${installer_id}.html"/>
        <copy file="${build.root.dir}/moxy/eclipselink.moxy.test/reports/jaxb/junit-noframes.html" tofile="${download.path}/test-results/moxy/eclipselink-jaxb-lrg-${installer_id}.html"/>
        <copy file="${build.root.dir}/moxy/eclipselink.moxy.test/reports/oxm/junit-noframes.html" tofile="${download.path}/test-results/moxy/eclipselink-oxm-lrg-${installer_id}.html"/>
        <copy file="${build.root.dir}/sdo/eclipselink.sdo.test/reports/true/junit-noframes.html" tofile="${download.path}/test-results/sdo/eclipselink-sdo-lrg-${installer_id}.html"/>
        <exec executable="${svn.exec}" failonerror="true" logError="true">
            <arg value="commit"/>
            <arg value="-m ${installer_id}"/>
            <arg value="${build.root.dir}/${eclipselink.jar.name}"/>
        </exec>
        <ant antfile="uploadToMaven.xml" dir="${build.root.dir}" target="upload.maven.all"/>
    </target>

    <target name="fix-permission">
        <chmod file="${build.root.dir}/buildsystem/cleanNightly.sh" perm="ug+x"/>
        <chmod file="${build.root.dir}/buildsystem/buildNightlyList.sh" perm="ug+x"/>
    </target>

    <!-- Antified "cleanNightly.sh" -->
    <target name="clean-results" depends="fix-permission">
        <exec executable="/bin/sh" failonerror="true" logError="true" >
            <arg value="${build.root.dir}/buildsystem/cleanNightly.sh"/>
        </exec>
    </target>

    <!-- Antified "buildNightlyList.sh" -->
    <target name="publish-results" depends="clean-results">
        <exec executable="/bin/sh" failonerror="true" logError="true" >
            <arg value="${build.root.dir}/buildsystem/buildNightlyList.sh"/>
        </exec>
    </target>

</project>
