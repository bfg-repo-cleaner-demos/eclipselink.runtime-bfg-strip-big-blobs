<project name="EclipseLink Automated Build" basedir="." default="build.nightly">
<echo message="---- AutoBuild.xml ----"/>

    <target name="build.no.publish" depends="clean, build, build.test"                      description="Trigger the automated build without testing or publish"/>
    <target name="build.nightly"    depends="clean, build, build.test, test.lrg, publish"   description="Trigger the nightly automated build and lrg tests" />
    <target name="build.continuous" depends="clean, build.no.javadoc, build.test, test.srg" description="Trigger the automated build and run the tests" />

    <target name="init">
        <property file="${basedir}/autobuild.properties"/>
        <property name="dir.build.deps" value="${env.BLD_DEPS_DIR}"/>
        <property name="dir.build.root" value="${env.BRANCH_DIR}"/>
        <property name="log.dir" value="${env.LOG_DIR}"/>
        <property name="dir.junit" value="${env.JUNIT_HOME}"/>
        <property name="junit.lib" value="${dir.junit}/junit.jar"/>

        <condition property="installer_id" value="${build_date}">
            <equals arg1="${build_id}" arg2="SNAPSHOT"/>
        </condition>
        <property name="installer_id" value="${release.version}${build_id}"/>
        <condition property="download.path" value="${eclipse.download.path}/nightly">
            <equals arg1="${build_id}" arg2="SNAPSHOT"/>
        </condition>
        <property name="download.path" value="${eclipse.download.path}"/>

        <echo message="ANT_ARGS='${env.ANT_ARGS}'"/>
        <echo message="ANT_OPTS='${env.ANT_OPTS}'"/>
        <echo message=" "/>
        <echo message="build_date.build_time='${build_date}.${build_time}'"/>
        <echo message="java.version  ='${java.version}'"/>
        <echo message="os.name       ='${os.name}'"/>
        <echo message="os.arch       ='${os.arch}'"/>
        <echo message="os.version    ='${os.version}'"/>
        <echo message=" "/>
        <echo message="basedir       ='${basedir}'"/>
        <echo message="dir.build.deps='${dir.build.deps}'"/>
        <echo message="dir.build.root='${dir.build.root}'"/>
        <echo message="log.dir       ='${log.dir}'"/>
        <echo message="dir.junit     ='${dir.junit}'"/>
        <echo message="junit.lib     ='${junit.lib}'"/>
    </target>

    <target name="clean" depends="init">
        <!-- Removed because build-clean should take care of old build artifacts,
             and svn should update source (including removing renamed, deleted files).
            delete dir="${dir.build.root}"/ -->
        <delete dir="${dir.junit}"/>
        <delete dir="${dir.build.deps}/mail"/>
        <delete file="${dir.build.deps}/junit.zip"/>
        <ant antfile="build.xml" dir="${dir.build.root}" target="clean"/>
    </target>

    <target name="get.dependencies" depends="clean">
        <!-- Get junit, extract it, then copy to expected location and cleanup (flatten won't work) -->
        <get src="http://download.eclipse.org/tools/orbit/downloads/drops/${junit.drop}/bundles/${junit.bundle}.zip" dest="${dir.build.deps}/junit.zip"/>
        <unzip src="${dir.build.deps}/junit.zip" dest="${dir.build.deps}"/>
        <mkdir dir="${dir.junit}"/>
        <copy file="${dir.build.deps}/${junit.bundle}/junit.jar" todir="${dir.junit}"/>
        <delete dir="${dir.build.deps}/${junit.bundle}"/>

        <mkdir dir="${dir.build.deps}/mail"/>
        <get src="http://download.eclipse.org/tools/orbit/downloads/drops/${junit.drop}/bundles/javax.activation_1.1.0.v200706111329.jar" dest="${dir.build.deps}/mail/activation_1.1.0.jar"/>
        <get src="http://download.eclipse.org/tools/orbit/downloads/drops/${junit.drop}/bundles/javax.mail_1.4.0.v200706111329.jar" dest="${dir.build.deps}/mail/mail_1.4.0.jar"/>
    </target>

    <target name="build" depends="get.dependencies">
        <ant antfile="build.xml" dir="${dir.build.root}" target="build.distribution"/>
    </target>

    <target name="build.no.javadoc" depends="get.dependencies">
        <ant antfile="build.xml" dir="${dir.build.root}" target="package.eclipselink.jar"/>
    </target>

    <target name="build.test" depends="get.dependencies">
        <ant antfile="build.xml" dir="${dir.build.root}" target="build.test"/>
    </target>

    <target name="test.srg">
        <ant antfile="build.xml" dir="${dir.build.root}" target="test.core.srg"/>
    </target>

    <target name="test.lrg">
        <ant antfile="build.xml" dir="${dir.build.root}" target="test.core.srg"/>
        <ant antfile="build.xml" dir="${dir.build.root}" target="test.jpa"/>
        <ant antfile="build.xml" dir="${dir.build.root}" target="test.moxy"/>
        <ant antfile="build.xml" dir="${dir.build.root}" target="test.sdo"/>
    </target>

    <target name="publish">
        <copy file="${dir.build.root}/${eclipselink.zip.name}${eclipselink.zip.extension}" tofile="${download.path}/${eclipselink.zip.name}-${installer_id}${eclipselink.zip.extension}"/>
        <copy file="${dir.build.root}/foundation/eclipselink.core.test/reports/junit-noframes.html" tofile="${download.path}/test-results/core/eclipselink-srg-${installer_id}.html"/>
        <copy file="${dir.build.root}/jpa/eclipselink.jpa.test/reports/junit-noframes.html" tofile="${download.path}/test-results/jpa/eclipselink-jpa-lrg-${installer_id}.html"/>
        <copy file="${dir.build.root}/moxy/eclipselink.moxy.test/reports/jaxb/junit-noframes.html" tofile="${download.path}/test-results/moxy/eclipselink-jaxb-lrg-${installer_id}.html"/>
        <copy file="${dir.build.root}/moxy/eclipselink.moxy.test/reports/oxm/junit-noframes.html" tofile="${download.path}/test-results/moxy/eclipselink-oxm-lrg-${installer_id}.html"/>
        <copy file="${dir.build.root}/sdo/eclipselink.sdo.test/reports/true/junit-noframes.html" tofile="${download.path}/test-results/sdo/eclipselink-sdo-lrg-${installer_id}.html"/>
        <exec executable="${svn.exec}">
            <arg value="commit"/>
            <arg value="-m ${installer_id}"/>
            <arg value="${dir.build.root}/${eclipselink.jar.name}"/>
        </exec>
        <ant antfile="uploadToMaven.xml" dir="${dir.build.root}" target="upload.maven"/>
    </target>

</project>
